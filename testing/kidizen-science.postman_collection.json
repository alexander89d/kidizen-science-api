{
	"info": {
		"_postman_id": "73a8f7a7-b5dd-40c6-acb4-ad31bc066b67",
		"name": "kidizen-science",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "add entity to nonexistent root-level collection",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "e5bb228f-939e-4504-ab77-aebebe4dfa6a",
						"exec": [
							"pm.test('404 status code', () => {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test('correct error message', () => {\r",
							"    const messageExpected = \"The collection you are seeking does not exist.\";\r",
							"    const messageReceived = pm.response.json().error;\r",
							"    pm.expect(messageReceived).to.equal(messageExpected);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"foo\": \"bar\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/foos",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"foos"
					]
				}
			},
			"response": []
		},
		{
			"name": "add entity to nonexistent child-level collection",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "a9eff670-489f-44ae-8d74-91e57b10b4b4",
						"exec": [
							"pm.test('404 status code', () => {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test('correct error message', () => {\r",
							"    const messageExpected = \"The collection you are seeking does not exist.\";\r",
							"    const messageReceived = pm.response.json().error;\r",
							"    pm.expect(messageReceived).to.equal(messageExpected);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"foo\": \"bar\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/projects/{{nonexistent_entity_id}}/foos",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"projects",
						"{{nonexistent_entity_id}}",
						"foos"
					]
				}
			},
			"response": []
		},
		{
			"name": "get entity of non-existent root-level collection",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "25a93a21-4841-4cef-ba74-d7dbf63b7f19",
						"exec": [
							"pm.test('404 status code', () => {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test('correct error message', () => {\r",
							"    const messageExpected = \"The collection you are seeking does not exist.\";\r",
							"    const messageReceived = pm.response.json().error;\r",
							"    pm.expect(messageReceived).to.equal(messageExpected);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/foos/12345",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"foos",
						"12345"
					]
				}
			},
			"response": []
		},
		{
			"name": "get entity of non-existent child-level collection",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "99e21df0-9998-4ace-b118-7b1f4b280da1",
						"exec": [
							"pm.test('404 status code', () => {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test('correct error message', () => {\r",
							"    const messageExpected = \"The collection you are seeking does not exist.\";\r",
							"    const messageReceived = pm.response.json().error;\r",
							"    pm.expect(messageReceived).to.equal(messageExpected);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/projects/{{nonexistent_entity_id}}/foos/12345",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"projects",
						"{{nonexistent_entity_id}}",
						"foos",
						"12345"
					]
				}
			},
			"response": []
		},
		{
			"name": "get all entities of nonexistent root-level collection",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "fec01c66-378e-452b-bc58-e2d0bf059ef0",
						"exec": [
							"pm.test('404 status code', () => {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test('correct error message', () => {\r",
							"    const messageExpected = \"The collection you are seeking does not exist.\";\r",
							"    const messageReceived = pm.response.json().error;\r",
							"    pm.expect(messageReceived).to.equal(messageExpected);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/foos",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"foos"
					]
				}
			},
			"response": []
		},
		{
			"name": "get all entities of nonexistent child-level collection",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "fec01c66-378e-452b-bc58-e2d0bf059ef0",
						"exec": [
							"pm.test('404 status code', () => {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test('correct error message', () => {\r",
							"    const messageExpected = \"The collection you are seeking does not exist.\";\r",
							"    const messageReceived = pm.response.json().error;\r",
							"    pm.expect(messageReceived).to.equal(messageExpected);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/projects/{{nonexistent_entity_id}}/foos",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"projects",
						"{{nonexistent_entity_id}}",
						"foos"
					]
				}
			},
			"response": []
		},
		{
			"name": "update entity of non-existent root-level collection",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "1a8f5e94-c4ec-43e5-97a9-79b6f20c069d",
						"exec": [
							"pm.test('404 status code', () => {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test('correct error message', () => {\r",
							"    const messageExpected = \"The collection you are seeking does not exist.\";\r",
							"    const messageReceived = pm.response.json().error;\r",
							"    pm.expect(messageReceived).to.equal(messageExpected);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"foo\": \"bar\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/foos/12345",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"foos",
						"12345"
					]
				}
			},
			"response": []
		},
		{
			"name": "update entity of non-existent child-level collection",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "1a8f5e94-c4ec-43e5-97a9-79b6f20c069d",
						"exec": [
							"pm.test('404 status code', () => {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test('correct error message', () => {\r",
							"    const messageExpected = \"The collection you are seeking does not exist.\";\r",
							"    const messageReceived = pm.response.json().error;\r",
							"    pm.expect(messageReceived).to.equal(messageExpected);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"foo\": \"bar\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/projects/{{nonexistent_entity_id}}/foos/12345",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"projects",
						"{{nonexistent_entity_id}}",
						"foos",
						"12345"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete entity from non-existent root-level collection",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "11d88705-a6e6-482a-9687-14276e3276d5",
						"exec": [
							"pm.test('404 status code', () => {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test('correct error message', () => {\r",
							"    const messageExpected = \"The collection you are seeking does not exist.\";\r",
							"    const messageReceived = pm.response.json().error;\r",
							"    pm.expect(messageReceived).to.equal(messageExpected);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/foos/12345",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"foos",
						"12345"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete entity from non-existent child-level collection",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "11d88705-a6e6-482a-9687-14276e3276d5",
						"exec": [
							"pm.test('404 status code', () => {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test('correct error message', () => {\r",
							"    const messageExpected = \"The collection you are seeking does not exist.\";\r",
							"    const messageReceived = pm.response.json().error;\r",
							"    pm.expect(messageReceived).to.equal(messageExpected);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/projects/{{nonexistent_entity_id}}/foos/12345",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"projects",
						"{{nonexistent_entity_id}}",
						"foos",
						"12345"
					]
				}
			},
			"response": []
		},
		{
			"name": "get entities from non-existent endpoint",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "b81916a9-2169-4c17-9b6b-35a7b9c6e5c7",
						"exec": [
							"pm.test('404 status code', () => {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test('correct error message', () => {\r",
							"    const messageExpected = \"The route to which you sent this request does not exist.\";\r",
							"    const messageReceived = pm.response.json().error;\r",
							"    pm.expect(messageReceived).to.equal(messageExpected);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/foo/bar/baz/bop/fizz",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"foo",
						"bar",
						"baz",
						"bop",
						"fizz"
					]
				}
			},
			"response": []
		},
		{
			"name": "create new teacher",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "05f95fbc-3554-4f68-a20e-88110a3e0ad8",
						"exec": [
							"pm.test(\"201 status code\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"/* Save the id to an environment variable and verify that it is a string. */\r",
							"const id = pm.response.json().id;\r",
							"pm.environment.set('teacher_1_id', id);\r",
							"\r",
							"pm.test(\"content is valid\", function () {\r",
							"   pm.expect(id).to.be.a('string');\r",
							"\r",
							"   /* Verify that the 'self' url matches what is expected based on the id. */\r",
							"   let selfUrlExpected = pm.environment.get('app_url') + '/teachers/' + id;\r",
							"   let selfUrlReceived = pm.response.json().self;\r",
							"   pm.expect(selfUrlReceived).to.equal(selfUrlExpected);\r",
							"});\r",
							"\r",
							"/* Save password to environment variable for quick access. */\r",
							"const teacher_1_attr = JSON.parse(pm.environment.get('teacher_1_attr'));\r",
							"const teacher_1_password = teacher_1_attr.password;\r",
							"pm.environment.set(\"teacher_1_password\", teacher_1_password);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "eeaf1bd2-8c5f-45e6-80a3-db36f78b9336",
						"exec": [
							"const teacher_1_attr = {\r",
							"    \"name\": \"Albert Einstein\",\r",
							"    \"email\": \"genius@bogusemail.com\",\r",
							"    \"school\": \"Birdseye View Elementary School\",\r",
							"    \"password\": \"relativity\",\r",
							"    \"secret_questions\": {\r",
							"        \"question_1\": \"What is the answer to life, the universe, and everything?\",\r",
							"        \"answer_1\": \"42\",\r",
							"        \"question_2\": \"What does the fox say?\",\r",
							"        \"answer_2\": \"Ring-ding-ding-ding-dingeringeding!\"\r",
							"    }\r",
							"};\r",
							"pm.environment.set('teacher_1_attr', JSON.stringify(teacher_1_attr));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{{teacher_1_attr}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/teachers",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"teachers"
					]
				}
			},
			"response": []
		},
		{
			"name": "upload teacher_1 image",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "f0e5723e-bfaf-4b9c-aff6-c389b99a3f27",
						"exec": [
							"pm.test('201 status code', () => {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test('content is valid', () => {\r",
							"    const teacher_1_image_url = pm.response.json().publicUrl;\r",
							"    pm.environment.set('teacher_1_image_url', teacher_1_image_url);\r",
							"    const storage_bucket_url = pm.environment.get('storage_bucket_url');\r",
							"    pm.expect(teacher_1_image_url).to.contain(storage_bucket_url);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{teacher_1_password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{teacher_1_id}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "image",
							"type": "file",
							"src": "teacher_1.jpg"
						}
					],
					"options": {
						"formdata": {}
					}
				},
				"url": {
					"raw": "{{app_url}}/images",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"images"
					]
				}
			},
			"response": []
		},
		{
			"name": "upload image to cloud storage no file provided",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "8dca24f8-a327-4590-b2a5-71d9c2bea8bb",
						"exec": [
							"pm.test('400 status code', () => {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test('correct error message', () => {\r",
							"    const messageExpected = \"No image has been uploaded.\";\r",
							"    const messageReceived = pm.response.json().error;\r",
							"    pm.expect(messageReceived).to.equal(messageExpected);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "foo",
							"value": "bar",
							"type": "text"
						}
					],
					"options": {
						"formdata": {}
					}
				},
				"url": {
					"raw": "{{app_url}}/images",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"images"
					]
				}
			},
			"response": []
		},
		{
			"name": "upload image to cloud storage bad format",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "6b51a61d-db47-4586-93d0-b73c399afc60",
						"exec": [
							"pm.test('400 status code', () => {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test('correct error message', () => {\r",
							"    const messageExpected = 'Images must be in JPEG or PNG format.';\r",
							"    const messageReceived = pm.response.json().error;\r",
							"    pm.expect(messageReceived).to.equal(messageExpected);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "image",
							"type": "file",
							"src": "seagulls.txt"
						}
					],
					"options": {
						"formdata": {}
					}
				},
				"url": {
					"raw": "{{app_url}}/images",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"images"
					]
				}
			},
			"response": []
		},
		{
			"name": "upload image to cloud storage incorrectly named form field",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "23626ea3-eec2-4289-bef7-836304d47db4",
						"exec": [
							"pm.test('400 status code', () => {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test('correct error message', () => {\r",
							"    const messageExpected = \r",
							"        \"Unable to process image upload. Ensure data is encoded as \"\r",
							"        + \"multipart/form-data and form field containing desired upload is named 'image'\"\r",
							"    const messageReceived = pm.response.json().error;\r",
							"    pm.expect(messageReceived).to.equal(messageExpected);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "pic",
							"type": "file",
							"src": "proj1-seagulls.jpg"
						}
					],
					"options": {
						"formdata": {}
					}
				},
				"url": {
					"raw": "{{app_url}}/images",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"images"
					]
				}
			},
			"response": []
		},
		{
			"name": "upload image to cloud storage too large file size",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "1f611f4c-d8d2-4009-8f55-890f85760315",
						"exec": [
							"pm.test('403 status code', () => {\r",
							"    pm.response.to.have.status(403);\r",
							"});\r",
							"\r",
							"pm.test('correct error message', () => {\r",
							"    const messageExpected = \"Images can be no larger than 10 MB\";\r",
							"    const messageReceived = pm.response.json().error;\r",
							"    pm.expect(messageReceived).to.equal(messageExpected);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "image",
							"type": "file",
							"src": "Sample_15MB_Image.jpg"
						}
					],
					"options": {
						"formdata": {}
					}
				},
				"url": {
					"raw": "{{app_url}}/images",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"images"
					]
				}
			},
			"response": []
		},
		{
			"name": "upload image to cloud storage unsupported media type",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "d9194a8c-bea2-49ab-976f-37f2563e549b",
						"exec": [
							"pm.test('415 status code', () => {\r",
							"    pm.response.to.have.status(415);\r",
							"});\r",
							"\r",
							"pm.test('correct error message', () => {\r",
							"    const messageExpected = 'This endpoint only accepts content of type multipart/form-data';\r",
							"    const messageReceived = pm.response.json().error;\r",
							"    pm.expect(messageReceived).to.equal(messageExpected);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"image\": \"seagulls.jpg\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/images",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"images"
					]
				}
			},
			"response": []
		},
		{
			"name": "add teacher_1 profile_photo",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "ccaa22f9-6f3c-422c-a579-67b2637866e9",
						"exec": [
							"pm.test('200 status code', () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{teacher_1_password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{teacher_1_id}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"profile_photo\": \"{{teacher_1_image_url}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/teachers/{{teacher_1_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"teachers",
						"{{teacher_1_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get teacher_1 info",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "ccaa22f9-6f3c-422c-a579-67b2637866e9",
						"exec": [
							"pm.test('200 status code', () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{teacher_1_password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{teacher_1_id}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/teachers/{{teacher_1_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"teachers",
						"{{teacher_1_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "revert teacher_1 profile_photo to default",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "ccaa22f9-6f3c-422c-a579-67b2637866e9",
						"exec": [
							"pm.test('200 status code', () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{teacher_1_password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{teacher_1_id}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"profile_photo\": null\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/teachers/{{teacher_1_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"teachers",
						"{{teacher_1_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "create teacher_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "05f95fbc-3554-4f68-a20e-88110a3e0ad8",
						"exec": [
							"pm.test(\"201 status code\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"/* Save the id to an environment variable and verify that it is a string. */\r",
							"const id = pm.response.json().id;\r",
							"pm.environment.set('teacher_2_id', id);\r",
							"\r",
							"pm.test(\"content is valid\", function () {\r",
							"   pm.expect(id).to.be.a('string');\r",
							"\r",
							"   /* Verify that the 'self' url matches what is expected based on the id. */\r",
							"   let selfUrlExpected = pm.environment.get('app_url') + '/teachers/' + id;\r",
							"   let selfUrlReceived = pm.response.json().self;\r",
							"   pm.expect(selfUrlReceived).to.equal(selfUrlExpected);\r",
							"});\r",
							"\r",
							"/* Save password to environment variable for quick access. */\r",
							"const teacher_2_attr = JSON.parse(pm.environment.get('teacher_2_attr'));\r",
							"const teacher_2_password = teacher_2_attr.password;\r",
							"pm.environment.set(\"teacher_2_password\", teacher_2_password);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "eeaf1bd2-8c5f-45e6-80a3-db36f78b9336",
						"exec": [
							"const teacher_2_attr = {\r",
							"    \"name\": \"Thomas Edison\",\r",
							"    \"email\": \"lightbulb@phonographs.com\",\r",
							"    \"school\": \"Invention Academy\",\r",
							"    \"password\": \"TeslaIsMyRival\",\r",
							"    \"secret_questions\": {\r",
							"        \"question_1\": \"How is an Edison phonograph powered?\",\r",
							"        \"answer_1\": \"crank\",\r",
							"        \"question_2\": \"In what city were you born?\",\r",
							"        \"answer_2\": \"Milan\"\r",
							"    }\r",
							"};\r",
							"pm.environment.set('teacher_2_attr', JSON.stringify(teacher_2_attr));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{{teacher_2_attr}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/teachers",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"teachers"
					]
				}
			},
			"response": []
		},
		{
			"name": "upload teacher_2 image",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "f0e5723e-bfaf-4b9c-aff6-c389b99a3f27",
						"exec": [
							"pm.test('201 status code', () => {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test('content is valid', () => {\r",
							"    const teacher_2_image_url = pm.response.json().publicUrl;\r",
							"    pm.environment.set('teacher_2_image_url', teacher_2_image_url);\r",
							"    const storage_bucket_url = pm.environment.get('storage_bucket_url');\r",
							"    pm.expect(teacher_2_image_url).to.contain(storage_bucket_url);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{teacher_2_password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{teacher_2_id}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "image",
							"type": "file",
							"src": "teacher_2.jpg"
						}
					],
					"options": {
						"formdata": {}
					}
				},
				"url": {
					"raw": "{{app_url}}/images",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"images"
					]
				}
			},
			"response": []
		},
		{
			"name": "add teacher_2 profile_photo",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "ccaa22f9-6f3c-422c-a579-67b2637866e9",
						"exec": [
							"pm.test('200 status code', () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "username",
							"value": "{{teacher_2_id}}",
							"type": "string"
						},
						{
							"key": "password",
							"value": "{{teacher_2_password}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"profile_photo\": \"{{teacher_2_image_url}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/teachers/{{teacher_2_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"teachers",
						"{{teacher_2_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get teacher_2 info",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "ccaa22f9-6f3c-422c-a579-67b2637866e9",
						"exec": [
							"pm.test('200 status code', () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "username",
							"value": "{{teacher_2_id}}",
							"type": "string"
						},
						{
							"key": "password",
							"value": "{{teacher_2_password}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/teachers/{{teacher_2_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"teachers",
						"{{teacher_2_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "upload project_1 image",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "f0e5723e-bfaf-4b9c-aff6-c389b99a3f27",
						"exec": [
							"pm.test('201 status code', () => {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test('content is valid', () => {\r",
							"    const project_1_image_url = pm.response.json().publicUrl;\r",
							"    pm.environment.set('project_1_image_url', project_1_image_url);\r",
							"    const storage_bucket_url = pm.environment.get('storage_bucket_url');\r",
							"    pm.expect(project_1_image_url).to.contain(storage_bucket_url);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{teacher_1_password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{teacher_1_id}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "image",
							"type": "file",
							"src": "proj1-seagulls.jpg"
						}
					],
					"options": {
						"formdata": {}
					}
				},
				"url": {
					"raw": "{{app_url}}/images",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"images"
					]
				}
			},
			"response": []
		},
		{
			"name": "create new project",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "05f95fbc-3554-4f68-a20e-88110a3e0ad8",
						"exec": [
							"pm.test(\"201 status code\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"content is valid\", function () {\r",
							"   /* Save the id to an environment variable and verify that it is a string. */\r",
							"   let id = pm.response.json().id;\r",
							"   pm.environment.set('project_1_id', id);\r",
							"   pm.expect(id).to.be.a('string');\r",
							"\r",
							"   /* Verify that the 'self' url matches what is expected based on the id. */\r",
							"   let selfUrlExpected = pm.environment.get('app_url') + '/projects/' + id;\r",
							"   let selfUrlReceived = pm.response.json().self;\r",
							"   pm.expect(selfUrlReceived).to.equal(selfUrlExpected);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "eeaf1bd2-8c5f-45e6-80a3-db36f78b9336",
						"exec": [
							"const project_1_image_url = pm.environment.get('project_1_image_url');\r",
							"const teacher_1_id = pm.environment.get('teacher_1_id');\r",
							"const project_1_attr = {\r",
							"    \"teacher_id\": teacher_1_id,\r",
							"    \"name\": \"Bird Species in Corvallis, Oregon\",\r",
							"    \"data_number\": {\r",
							"        \"name\": \"Number of Bird Species Reported\",\r",
							"        \"must_be_unique\": true,\r",
							"        \"number\": 0\r",
							"    },\r",
							"    \"description_image\": {\r",
							"        \"title\": \"Seagulls\",\r",
							"        \"url\": project_1_image_url,\r",
							"        \"alt_text\": \"3 seagulls flying over water\"\r",
							"    },\r",
							"    \"description_text\": \"Students will take pictures of birds throughout Corvallis, OR and identify the species type. Whenever a student reports a species type not already included in observations, the count of species found will be increased.\"\r",
							"};\r",
							"pm.environment.set('project_1_attr', JSON.stringify(project_1_attr));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "username",
							"value": "{{teacher_1_id}}",
							"type": "string"
						},
						{
							"key": "password",
							"value": "{{teacher_1_password}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{{project_1_attr}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/projects",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"projects"
					]
				}
			},
			"response": []
		},
		{
			"name": "create new project invalid teacher id",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "c8f2aa29-d9f2-489a-8ae9-e17b129bf033",
						"exec": [
							"pm.test('400 status code', () => {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test('correct error message', () => {\r",
							"    const messageExpected = \"At least one parameter was missing, invalid, or extraneous.\";\r",
							"    const messageReceived = pm.response.json().error;\r",
							"    pm.expect(messageReceived).to.equal(messageExpected);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"teacher_id\": \"foo\",\r\n    \"name\": \"Bird Species in Corvallis, Oregon\",\r\n    \"data_number\": {\r\n        \"name\": \"Number of Bird Species Reported\",\r\n        \"must_be_unique\": true,\r\n        \"number\": 2\r\n    },\r\n    \"description_image\": {\r\n        \"title\": \"Seagulls\",\r\n        \"url\": \"https://pixabay.com/images/id-4026280/\",\r\n        \"alt_text\": \"3 seagulls flying over water\"\r\n    },\r\n    \"description_text\": \"Students will take pictures of birds throughout Corvallis, OR and identify the species type. Whenever a student reports a species type not already included in observations, the count of species found will be increased.\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/projects",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"projects"
					]
				}
			},
			"response": []
		},
		{
			"name": "create new project incorrect variable type",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "06d8d174-13af-4b63-bf14-6a94ec495945",
						"exec": [
							"pm.test('400 status code', () => {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test('correct error message', () => {\r",
							"    const messageExpected = \"At least one parameter was missing, invalid, or extraneous.\";\r",
							"    const messageReceived = pm.response.json().error;\r",
							"    pm.expect(messageReceived).to.equal(messageExpected);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"teacher_id\": \"123\",\r\n    \"name\": \"Bird Species in Corvallis, Oregon\",\r\n    \"data_number\": {\r\n        \"name\": \"Number of Bird Species Reported\",\r\n        \"must_be_unique\": true,\r\n        \"number\": \"2\"\r\n    },\r\n    \"description_image\": {\r\n        \"title\": \"Seagulls\",\r\n        \"url\": \"https://pixabay.com/images/id-4026280/\",\r\n        \"alt_text\": \"3 seagulls flying over water\"\r\n    },\r\n    \"description_text\": \"Students will take pictures of birds throughout Corvallis, OR and identify the species type. Whenever a student reports a species type not already included in observations, the count of species found will be increased.\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/projects",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"projects"
					]
				}
			},
			"response": []
		},
		{
			"name": "create new project missing property",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "7e7c8f86-08b3-43bf-bff0-43177db8e4d5",
						"exec": [
							"pm.test('400 status code', () => {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test('correct error message', () => {\r",
							"    const messageExpected = \"At least one parameter was missing, invalid, or extraneous.\";\r",
							"    const messageReceived = pm.response.json().error;\r",
							"    pm.expect(messageReceived).to.equal(messageExpected);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"teacher_id\": \"123\",\r\n    \"data_number\": {\r\n        \"name\": \"Number of Bird Species Reported\",\r\n        \"must_be_unique\": true,\r\n        \"number\": 2\r\n    },\r\n    \"description_image\": {\r\n        \"title\": \"Seagulls\",\r\n        \"url\": \"https://pixabay.com/images/id-4026280/\",\r\n        \"alt_text\": \"3 seagulls flying over water\"\r\n    },\r\n    \"description_text\": \"Students will take pictures of birds throughout Corvallis, OR and identify the species type. Whenever a student reports a species type not already included in observations, the count of species found will be increased.\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/projects",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"projects"
					]
				}
			},
			"response": []
		},
		{
			"name": "create new project missing subproperty",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "a5ed402d-2ad0-4321-a1ca-52ca9745a5cb",
						"exec": [
							"pm.test('400 status code', () => {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test('correct error message', () => {\r",
							"    const messageExpected = \"At least one parameter was missing, invalid, or extraneous.\";\r",
							"    const messageReceived = pm.response.json().error;\r",
							"    pm.expect(messageReceived).to.equal(messageExpected);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"teacher_id\": \"123\",\r\n    \"name\": \"Bird Species in Corvallis, Oregon\",\r\n    \"data_number\": {\r\n        \"name\": \"Number of Bird Species Reported\",\r\n        \"must_be_unique\": true,\r\n        \"number\": 2\r\n    },\r\n    \"description_image\": {\r\n        \"title\": \"Seagulls\",\r\n        \"alt_text\": \"3 seagulls flying over water\"\r\n    },\r\n    \"description_text\": \"Students will take pictures of birds throughout Corvallis, OR and identify the species type. Whenever a student reports a species type not already included in observations, the count of species found will be increased.\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/projects",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"projects"
					]
				}
			},
			"response": []
		},
		{
			"name": "create new project with extraneous property",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "1fb83168-b767-485a-b3ab-48ba07602010",
						"exec": [
							"pm.test('400 status code', () => {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test('correct error message', () => {\r",
							"    const messageExpected = \"At least one parameter was missing, invalid, or extraneous.\";\r",
							"    const messageReceived = pm.response.json().error;\r",
							"    pm.expect(messageReceived).to.equal(messageExpected);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"teacher_id\": \"123\",\r\n    \"name\": \"Bird Species in Corvallis, Oregon\",\r\n    \"data_number\": {\r\n        \"name\": \"Number of Bird Species Reported\",\r\n        \"must_be_unique\": true,\r\n        \"number\": 2\r\n    },\r\n    \"description_image\": {\r\n        \"title\": \"Seagulls\",\r\n        \"url\": \"https://pixabay.com/images/id-4026280/\",\r\n        \"alt_text\": \"3 seagulls flying over water\"\r\n    },\r\n    \"description_text\": \"Students will take pictures of birds throughout Corvallis, OR and identify the species type. Whenever a student reports a species type not already included in observations, the count of species found will be increased.\",\r\n    \"foo\": \"bar\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/projects",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"projects"
					]
				}
			},
			"response": []
		},
		{
			"name": "create new project with extraneous subproperty",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "fe0a65fa-5e72-4882-ba9f-880dfa41022c",
						"exec": [
							"pm.test('400 status code', () => {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test('correct error message', () => {\r",
							"    const messageExpected = \"At least one parameter was missing, invalid, or extraneous.\";\r",
							"    const messageReceived = pm.response.json().error;\r",
							"    pm.expect(messageReceived).to.equal(messageExpected);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"teacher_id\": \"123\",\r\n    \"name\": \"Bird Species in Corvallis, Oregon\",\r\n    \"data_number\": {\r\n        \"name\": \"Number of Bird Species Reported\",\r\n        \"must_be_unique\": true,\r\n        \"number\": 2,\r\n        \"foo\": \"bar\"\r\n    },\r\n    \"description_image\": {\r\n        \"title\": \"Seagulls\",\r\n        \"url\": \"https://pixabay.com/images/id-4026280/\",\r\n        \"alt_text\": \"3 seagulls flying over water\"\r\n    },\r\n    \"description_text\": \"Students will take pictures of birds throughout Corvallis, OR and identify the species type. Whenever a student reports a species type not already included in observations, the count of species found will be increased.\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/projects",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"projects"
					]
				}
			},
			"response": []
		},
		{
			"name": "create project empty string property",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "5fb690ad-f378-4979-bb64-7047281b9820",
						"exec": [
							"pm.test('400 status code', () => {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test('correct error message', () => {\r",
							"    const messageExpected = \"At least one parameter was missing, invalid, or extraneous.\";\r",
							"    const messageReceived = pm.response.json().error;\r",
							"    pm.expect(messageReceived).to.equal(messageExpected);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"teacher_id\": \"123\",\r\n    \"name\": \"\",\r\n    \"data_number\": {\r\n        \"name\": \"Number of Bird Species Reported\",\r\n        \"must_be_unique\": true,\r\n        \"number\": 2\r\n    },\r\n    \"description_image\": {\r\n        \"title\": \"Seagulls\",\r\n        \"url\": \"https://pixabay.com/images/id-4026280/\",\r\n        \"alt_text\": \"3 seagulls flying over water\"\r\n    },\r\n    \"description_text\": \"Students will take pictures of birds throughout Corvallis, OR and identify the species type. Whenever a student reports a species type not already included in observations, the count of species found will be increased.\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/projects",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"projects"
					]
				}
			},
			"response": []
		},
		{
			"name": "create project empty string subproperty",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "527f9bd4-86fc-4443-92b0-7f4c9358a87b",
						"exec": [
							"pm.test('400 status code', () => {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test('correct error message', () => {\r",
							"    const messageExpected = \"At least one parameter was missing, invalid, or extraneous.\";\r",
							"    const messageReceived = pm.response.json().error;\r",
							"    pm.expect(messageReceived).to.equal(messageExpected);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"teacher_id\": \"123\",\r\n    \"name\": \"Bird Species in Corvallis, Oregon\",\r\n    \"data_number\": {\r\n        \"name\": \"Number of Bird Species Reported\",\r\n        \"must_be_unique\": true,\r\n        \"number\": 2\r\n    },\r\n    \"description_image\": {\r\n        \"title\": \"Seagulls\",\r\n        \"url\": \"https://pixabay.com/images/id-4026280/\",\r\n        \"alt_text\": \"\"\r\n    },\r\n    \"description_text\": \"Students will take pictures of birds throughout Corvallis, OR and identify the species type. Whenever a student reports a species type not already included in observations, the count of species found will be increased.\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/projects",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"projects"
					]
				}
			},
			"response": []
		},
		{
			"name": "create new project bad format image url",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "f827881e-d0c9-4400-8b7c-f1723de171e2",
						"exec": [
							"pm.test('400 status code', () => {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test('correct error message', () => {\r",
							"    const messageExpected = 'The image URL provided is improperly formatted, the image does not exist, or the image is not in an acceptable format';\r",
							"    const messageReceived = pm.response.json().error;\r",
							"    pm.expect(messageReceived).to.equal(messageExpected);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"teacher_id\": \"123\",\r\n    \"name\": \"Bird Species in Corvallis, Oregon\",\r\n    \"data_number\": {\r\n        \"name\": \"Number of Bird Species Reported\",\r\n        \"must_be_unique\": true,\r\n        \"number\": 2\r\n    },\r\n    \"description_image\": {\r\n        \"title\": \"Seagulls\",\r\n        \"url\": \"https://bogus_image_site.net\",\r\n        \"alt_text\": \"3 seagulls flying over water\"\r\n    },\r\n    \"description_text\": \"Students will take pictures of birds throughout Corvallis, OR and identify the species type. Whenever a student reports a species type not already included in observations, the count of species found will be increased.\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/projects",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"projects"
					]
				}
			},
			"response": []
		},
		{
			"name": "create new project image does not exist",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "6f7b363e-5e10-4449-9b5f-f665a73d6bea",
						"exec": [
							"pm.test('400 status code', () => {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test('correct error message', () => {\r",
							"    const messageExpected = 'The image URL provided is improperly formatted, the image does not exist, or the image is not in an acceptable format';\r",
							"    const messageReceived = pm.response.json().error;\r",
							"    pm.expect(messageReceived).to.equal(messageExpected);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"teacher_id\": \"123\",\r\n    \"name\": \"Bird Species in Corvallis, Oregon\",\r\n    \"data_number\": {\r\n        \"name\": \"Number of Bird Species Reported\",\r\n        \"must_be_unique\": true,\r\n        \"number\": 2\r\n    },\r\n    \"description_image\": {\r\n        \"title\": \"Seagulls\",\r\n        \"url\": \"https://storage.googleapis.com/kidizen-science-images/foo\",\r\n        \"alt_text\": \"3 seagulls flying over water\"\r\n    },\r\n    \"description_text\": \"Students will take pictures of birds throughout Corvallis, OR and identify the species type. Whenever a student reports a species type not already included in observations, the count of species found will be increased.\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/projects",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"projects"
					]
				}
			},
			"response": []
		},
		{
			"name": "create new project cannot parse JSON",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "a32b6edb-c9a7-453b-925e-019a142b8404",
						"exec": [
							"pm.test('400 status code', () => {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test('correct error message', () => {\r",
							"    const messageExpected = \"Unable to parse JSON in request body.\";\r",
							"    const messageReceived = pm.response.json().error;\r",
							"    pm.expect(messageReceived).to.equal(messageExpected);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"teacher_id\": \"123\",\r\n    \"name\": \"Bird Species in Corvallis, Oregon\",\r\n    \"data_number\": {\r\n        \"name\": \"Number of Bird Species Reported\",\r\n        \"must_be_unique\": true,\r\n        \"number\": 2 {\r\n    },\r\n    \"description_image\": {\r\n        \"title\": \"Seagulls\",\r\n        \"url\": \"https://storage.googleapis.com/kidizen-science-images/foo\",\r\n        \"alt_text\": \"3 seagulls flying over water\"\r\n    },\r\n    \"description_text\": \"Students will take pictures of birds throughout Corvallis, OR and identify the species type. Whenever a student reports a species type not already included in observations, the count of species found will be increased.\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/projects",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"projects"
					]
				}
			},
			"response": []
		},
		{
			"name": "create new project unsupported media type",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4db56d8f-0c2b-43f8-9aa6-f028e7dac2f4",
						"exec": [
							"pm.test('415 status code', () => {\r",
							"    pm.response.to.have.status(415);\r",
							"});\r",
							"\r",
							"pm.test('correct error message', () => {\r",
							"    const messageExpected = 'This endpoint only accepts content of type application/json';\r",
							"    const messageReceived = pm.response.json().error;\r",
							"    pm.expect(messageReceived).to.equal(messageExpected);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "<ul>\r\n    <li>Name: Let's look at birds!</li>\r\n</ul>",
					"options": {
						"raw": {
							"language": "html"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/projects",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"projects"
					]
				}
			},
			"response": []
		},
		{
			"name": "get project just created",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "60688878-c047-4705-b646-d48b1c300ec5",
						"exec": [
							"/* Import compareEntities function from environment variable. */\r",
							"const compareEntities = Function(\r",
							"    'entityReceived',\r",
							"    'entityExpected',\r",
							"    JSON.parse(pm.environment.get('compareEntities'))\r",
							");\r",
							"\r",
							"\r",
							"pm.test(\"200 status code\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"content is valid\", function () {\r",
							"    /* Get the attributes expected based on the body of the POST request to create\r",
							"     * project_1. */\r",
							"    const attrExpected = JSON.parse(pm.environment.get('project_1_attr'));\r",
							"\r",
							"    /* Add expected id and self attributes. */\r",
							"    const projectId = pm.environment.get('project_1_id');\r",
							"    attrExpected.id = projectId;\r",
							"    attrExpected.self = pm.environment.get('app_url') + \"/projects/\" + projectId;\r",
							"\r",
							"    /* Replace teacher_id property with teacher containing id and self. */\r",
							"    const teacher_id = attrExpected.teacher_id;\r",
							"    delete attrExpected.teacher_id;\r",
							"    attrExpected.teacher = {\r",
							"        \"id\": teacher_id,\r",
							"        \"self\": pm.environment.get('app_url') + \"/teachers/\" + teacher_id\r",
							"    };\r",
							"\r",
							"    /* Verify that the exact same set of properties with the exact same values\r",
							"     * were received and expected. */\r",
							"    const attrReceived = pm.response.json();\r",
							"    let projectsMatch = compareEntities(attrReceived, attrExpected);\r",
							"    pm.expect(projectsMatch).to.be.true;\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "2919b04f-2641-4818-b01f-1705b1c02218",
						"exec": [
							"/* Create compareEntities function to do a deep comparison of two entities ensuring\r",
							" * they have the exact same properties with the exact same values\r",
							" * (including nested objects and arrays). Save as environment variable\r",
							" * for use accross multiple test scripts. */\r",
							"pm.environment.set('compareEntities', JSON.stringify(\r",
							"    `{\r",
							"        const compareArrays = function(arrReceived, arrExpected) {\r",
							"            if (arrReceived.length !== arrExpected.length) {\r",
							"                return false;\r",
							"            }\r",
							"\r",
							"            /* Iterate over each element of arrExpected to make sure\r",
							"             * it was received. */\r",
							"            outerLoop:\r",
							"            for (let i = 0; i < arrExpected.length; i++) {\r",
							"                /* Search arrReceived for current element of arrExpected,\r",
							"                 * continuing until match is found. */\r",
							"                innerLoop:\r",
							"                for (let j = 0; j < arrReceived.length; j++) {\r",
							"                    if (\r",
							"                        Array.isArray(arrExpected[i]) === true \r",
							"                        && Array.isArray(arrReceived[j]) === true\r",
							"                    ) {\r",
							"                        if (compareArrays(arrReceived[j], arrExpected[i]) === true) \r",
							"                        {\r",
							"                            break innerLoop;\r",
							"                        }\r",
							"                    }\r",
							"\r",
							"                    else if (\r",
							"                        typeof(arrExpected[i]) === 'object' && arrExpected[i] !== null \r",
							"                        && typeof(arrReceived[j]) === 'object' && arrReceived[j] !== null\r",
							"                    ) {\r",
							"                        if (compareObjects(arrReceived[j], arrExpected[i]) === true) {\r",
							"                            break innerLoop;\r",
							"                        }\r",
							"                    }\r",
							"\r",
							"                    else if (arrReceived[i] === arrExpected[j]) {\r",
							"                        break innerLoop;\r",
							"                    }\r",
							"\r",
							"                    /* If the element expected was not found in the array received,\r",
							"                     * return false to calling function. */\r",
							"                    if (j === arrReceived.length - 1) {\r",
							"                        return false;\r",
							"                    }\r",
							"                }\r",
							"            }\r",
							"\r",
							"            return true;\r",
							"        };\r",
							"        \r",
							"        const compareObjects = function(objReceived, objExpected) {\r",
							"            /* Verify that same number of attributes were received as expected. */\r",
							"            const keysReceived = Object.keys(objReceived);\r",
							"            const keysExpected = Object.keys(objExpected);\r",
							"            if (keysReceived.length !== keysExpected.length) {\r",
							"                return false;\r",
							"            }\r",
							"\r",
							"            /* Verify that the same attirbutes are present with the same values. */\r",
							"            for (const key of keysExpected) {\r",
							"                const propExpected = objExpected[key];\r",
							"                const propReceived = objReceived[key];\r",
							"\r",
							"                /* If the attribute is an array, verify that the arrays are equal. */\r",
							"                if (\r",
							"                    Array.isArray(propReceived) === true && \r",
							"                    Array.isArray(propExpected) === true\r",
							"                ) {\r",
							"                    if (compareArrays(propReceived, propExpected) === false) {\r",
							"                        return false;\r",
							"                    }\r",
							"                }\r",
							"\r",
							"                /* If the attribute is a non-null object, verify equality. */\r",
							"                else if (\r",
							"                    typeof(propExpected) === 'object' && propExpected !== null \r",
							"                    && typeof(propReceived) === 'object' && propReceived !== null    \r",
							"                ) {\r",
							"                    if(compareObjects(propReceived, propExpected) === false) {\r",
							"                        return false;\r",
							"                    }\r",
							"                }\r",
							"\r",
							"                /* Otherwise, just do strict comparison of property. */\r",
							"                else {\r",
							"                    if (propReceived !== propExpected) {\r",
							"                        return false;\r",
							"                    }\r",
							"                }\r",
							"            }\r",
							"\r",
							"            /* If the above loop terminated without returning false,\r",
							"            * return true to indicate the objects are equivalent. */\r",
							"            return true;\r",
							"        }\r",
							"\r",
							"        /* Determine whether to call compareObjects or compareArrays\r",
							"         * on the arguments of compareEntities. */\r",
							"        if (Array.isArray(entityReceived) && Array.isArray(entityExpected)) {\r",
							"            return compareArrays(entityReceived, entityExpected);\r",
							"        } else {\r",
							"            return compareObjects(entityReceived, entityExpected);\r",
							"        }\r",
							"    }`\r",
							"));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/projects/{{project_1_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"projects",
						"{{project_1_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get project with nonexistent id",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "a04c68a4-82d4-464f-a573-31c570a2dcd2",
						"exec": [
							"pm.test('404 status code', () => {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test('correct error message', () => {\r",
							"    const messageExpected = \"The item you requested could not be found.\";\r",
							"    const messageReceived = pm.response.json().error;\r",
							"    pm.expect(messageReceived).to.equal(messageExpected);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/projects/{{nonexistent_entity_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"projects",
						"{{nonexistent_entity_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get project with bad format id",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "811ea3ea-ba04-46c9-b83c-281406aac904",
						"exec": [
							"pm.test('400 status code', () => {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test('correct error message', () => {\r",
							"    const messageExpected = \"All IDs must be positive integers.\";\r",
							"    const messageReceived = pm.response.json().error;\r",
							"    pm.expect(messageReceived).to.equal(messageExpected);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/projects/{{bad_format_entity_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"projects",
						"{{bad_format_entity_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "upload project_2 image",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "f986cd87-ab69-47d9-a7c0-71c30d38592b",
						"exec": [
							"pm.test('201 status code', () => {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test('content is valid', () => {\r",
							"    const project_2_image_url = pm.response.json().publicUrl;\r",
							"    pm.environment.set('project_2_image_url', project_2_image_url);\r",
							"    const storage_bucket_url = pm.environment.get('storage_bucket_url');\r",
							"    pm.expect(project_2_image_url).to.contain(storage_bucket_url);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{teacher_1_password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{teacher_1_id}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "image",
							"type": "file",
							"src": "proj2-canadian-goose.jpg"
						}
					],
					"options": {
						"formdata": {}
					}
				},
				"url": {
					"raw": "{{app_url}}/images",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"images"
					]
				}
			},
			"response": []
		},
		{
			"name": "create project_2",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "04f1f201-e48d-4b92-84e9-3d8b3396ce46",
						"exec": [
							"const teacher_1_id = pm.environment.get(\"teacher_1_id\");\r",
							"const project_2_image_url = pm.environment.get('project_2_image_url');\r",
							"const project_2_attr = {\r",
							"    \"teacher_id\": teacher_1_id,\r",
							"    \"name\": \"Canada Goose Migration\",\r",
							"    \"data_number\": {\r",
							"        \"name\": \"Number of observations\",\r",
							"        \"must_be_unique\": false,\r",
							"        \"number\": 0\r",
							"    },\r",
							"    \"description_image\": {\r",
							"        \"title\": \"canada goose\",\r",
							"        \"url\": project_2_image_url,\r",
							"        \"alt_text\": \"a canada goose\"\r",
							"    },\r",
							"    \"description_text\": \"Canada Geese migrate annually, but their migration patterns may be changing due to changes in North American climates. Students will collect observations of geese over time for comparison to historical migration data.\"\r",
							"};\r",
							"pm.environment.set('project_2_attr', JSON.stringify(project_2_attr));"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "91b3edf0-4731-4d0a-9259-f22023df0fcf",
						"exec": [
							"pm.test(\"201 status code\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"content is valid\", function () {\r",
							"   /* Save the id to an environment variable and verify that it is a string. */\r",
							"   let id = pm.response.json().id;\r",
							"   pm.environment.set('project_2_id', id);\r",
							"   pm.expect(id).to.be.a('string');\r",
							"\r",
							"   /* Verify that the 'self' url matches what is expected based on the id. */\r",
							"   let selfUrlExpected = pm.environment.get('app_url') + '/projects/' + id;\r",
							"   let selfUrlReceived = pm.response.json().self;\r",
							"   pm.expect(selfUrlReceived).to.equal(selfUrlExpected);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "username",
							"value": "{{teacher_1_id}}",
							"type": "string"
						},
						{
							"key": "password",
							"value": "{{teacher_1_password}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{{project_2_attr}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/projects",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"projects"
					]
				}
			},
			"response": []
		},
		{
			"name": "upload project_3 image",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4f84a89a-76ee-46ba-a5b0-8baeec896ba4",
						"exec": [
							"pm.test('201 status code', () => {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test('content is valid', () => {\r",
							"    const project_3_image_url = pm.response.json().publicUrl;\r",
							"    pm.environment.set('project_3_image_url', project_3_image_url);\r",
							"    const storage_bucket_url = pm.environment.get('storage_bucket_url');\r",
							"    pm.expect(project_3_image_url).to.contain(storage_bucket_url);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{teacher_1_password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{teacher_1_id}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "image",
							"type": "file",
							"src": "proj3-supernova.jpg"
						}
					],
					"options": {
						"formdata": {}
					}
				},
				"url": {
					"raw": "{{app_url}}/images",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"images"
					]
				}
			},
			"response": []
		},
		{
			"name": "create project_3",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "6008931f-7a88-4aaa-9f11-4da0b2a26dc7",
						"exec": [
							"const project_3_image_url = pm.environment.get('project_3_image_url');\r",
							"const teacher_1_id = pm.environment.get('teacher_1_id');\r",
							"const project_3_attr = {\r",
							"    \"teacher_id\": teacher_1_id,\r",
							"    \"name\": \"Supernova Observation\",\r",
							"    \"data_number\": {\r",
							"        \"name\": \"Number of observations\",\r",
							"        \"must_be_unique\": false,\r",
							"        \"number\": 854\r",
							"    },\r",
							"    \"description_image\": {\r",
							"        \"title\": \"supernova\",\r",
							"        \"url\": project_3_image_url,\r",
							"        \"alt_text\": \"supernova\"\r",
							"    },\r",
							"    \"description_text\": \"It is fun to watch stars go boom!\"\r",
							"};\r",
							"pm.environment.set('project_3_attr', JSON.stringify(project_3_attr));"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "e678e16d-2f42-4adf-b587-05b7aa311bdf",
						"exec": [
							"pm.test(\"201 status code\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"content is valid\", function () {\r",
							"   /* Save the id to an environment variable and verify that it is a string. */\r",
							"   let id = pm.response.json().id;\r",
							"   pm.environment.set('project_3_id', id);\r",
							"   pm.expect(id).to.be.a('string');\r",
							"\r",
							"   /* Verify that the 'self' url matches what is expected based on the id. */\r",
							"   let selfUrlExpected = pm.environment.get('app_url') + '/projects/' + id;\r",
							"   let selfUrlReceived = pm.response.json().self;\r",
							"   pm.expect(selfUrlReceived).to.equal(selfUrlExpected);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "username",
							"value": "{{teacher_1_id}}",
							"type": "string"
						},
						{
							"key": "password",
							"value": "{{teacher_1_password}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{{project_3_attr}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/projects",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"projects"
					]
				}
			},
			"response": []
		},
		{
			"name": "upload project_4 image",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "5faa8c7b-cf4b-4ddf-864b-653145618d1a",
						"exec": [
							"pm.test('201 status code', () => {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test('content is valid', () => {\r",
							"    const project_4_image_url = pm.response.json().publicUrl;\r",
							"    pm.environment.set('project_4_image_url', project_4_image_url);\r",
							"    const storage_bucket_url = pm.environment.get('storage_bucket_url');\r",
							"    pm.expect(project_4_image_url).to.contain(storage_bucket_url);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{teacher_2_password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{teacher_2_id}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "image",
							"type": "file",
							"src": "proj4_eggs.jpg"
						}
					],
					"options": {
						"formdata": {}
					}
				},
				"url": {
					"raw": "{{app_url}}/images",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"images"
					]
				}
			},
			"response": []
		},
		{
			"name": "create project_4",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "dc5aed36-4982-4276-b848-52858f99a6b0",
						"exec": [
							"const project_4_image_url = pm.environment.get('project_4_image_url');\r",
							"const teacher_2_id = pm.environment.get('teacher_2_id');\r",
							"const project_4_attr = {\r",
							"    \"teacher_id\": teacher_2_id,\r",
							"    \"name\": \"Waterfowl Hatchrates\",\r",
							"    \"data_number\": {\r",
							"        \"name\": \"Number of observations\",\r",
							"        \"must_be_unique\": false,\r",
							"        \"number\": 3\r",
							"    },\r",
							"    \"description_image\": {\r",
							"        \"title\": \"egg\",\r",
							"        \"url\": project_4_image_url,\r",
							"         \"alt_text\": \"egg in nest\"\r",
							"    },\r",
							"    \"description_text\": \"I love eggs\"\r",
							"};\r",
							"pm.environment.set('project_4_attr', JSON.stringify(project_4_attr));"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "1f5dd653-07fb-45bf-b8e8-1c911d23978e",
						"exec": [
							"pm.test(\"201 status code\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"content is valid\", function () {\r",
							"   /* Save the id to an environment variable and verify that it is a string. */\r",
							"   let id = pm.response.json().id;\r",
							"   pm.environment.set('project_4_id', id);\r",
							"   pm.expect(id).to.be.a('string');\r",
							"\r",
							"   /* Verify that the 'self' url matches what is expected based on the id. */\r",
							"   let selfUrlExpected = pm.environment.get('app_url') + '/projects/' + id;\r",
							"   let selfUrlReceived = pm.response.json().self;\r",
							"   pm.expect(selfUrlReceived).to.equal(selfUrlExpected);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{teacher_2_password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{teacher_2_id}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{{project_4_attr}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/projects",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"projects"
					]
				}
			},
			"response": []
		},
		{
			"name": "upload project_5 image",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "f071b40d-a2b0-48e3-8f06-94652e53aff2",
						"exec": [
							"pm.test('201 status code', () => {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test('content is valid', () => {\r",
							"    const project_5_image_url = pm.response.json().publicUrl;\r",
							"    pm.environment.set('project_5_image_url', project_5_image_url);\r",
							"    const storage_bucket_url = pm.environment.get('storage_bucket_url');\r",
							"    pm.expect(project_5_image_url).to.contain(storage_bucket_url);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{teacher_2_password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{teacher_2_id}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "image",
							"type": "file",
							"src": "proj5-big-dipper.png"
						}
					],
					"options": {
						"formdata": {}
					}
				},
				"url": {
					"raw": "{{app_url}}/images",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"images"
					]
				}
			},
			"response": []
		},
		{
			"name": "create project_5",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "9c09cc19-2c77-4429-b182-0f4b47a6d491",
						"exec": [
							"const project_5_image_url = pm.environment.get('project_5_image_url');\r",
							"const teacher_2_id = pm.environment.get(\"teacher_2_id\");\r",
							"const project_5_attr = {\r",
							"    \"teacher_id\": teacher_2_id,\r",
							"    \"name\": \"Stars of the Night Sky\",\r",
							"    \"data_number\": {\r",
							"        \"name\": \"Constellations Observed\",\r",
							"        \"must_be_unique\": true,\r",
							"        \"number\": 0\r",
							"    },\r",
							"    \"description_image\": {\r",
							"        \"title\": \"Big Dipper\",\r",
							"        \"url\": project_5_image_url,\r",
							"        \"alt_text\": \"The Big Dipper\"\r",
							"    },\r",
							"    \"description_text\": \"Students wil observe the night sky and see how many constellations they can find.\"\r",
							"};\r",
							"pm.environment.set('project_5_attr', JSON.stringify(project_5_attr));"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "b69e81c2-80bb-45eb-8cdd-a5e9da5d7a73",
						"exec": [
							"pm.test(\"201 status code\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"content is valid\", function () {\r",
							"   /* Save the id to an environment variable and verify that it is a string. */\r",
							"   let id = pm.response.json().id;\r",
							"   pm.environment.set('project_5_id', id);\r",
							"   pm.expect(id).to.be.a('string');\r",
							"\r",
							"   /* Verify that the 'self' url matches what is expected based on the id. */\r",
							"   let selfUrlExpected = pm.environment.get('app_url') + '/projects/' + id;\r",
							"   let selfUrlReceived = pm.response.json().self;\r",
							"   pm.expect(selfUrlReceived).to.equal(selfUrlExpected);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{teacher_2_password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{teacher_2_id}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{{project_5_attr}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/projects",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"projects"
					]
				}
			},
			"response": []
		},
		{
			"name": "upload project_6 image",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "d6cc22e9-438e-4be8-a7ba-40cbed845561",
						"exec": [
							"pm.test('201 status code', () => {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test('content is valid', () => {\r",
							"    const project_6_image_url = pm.response.json().publicUrl;\r",
							"    pm.environment.set('project_6_image_url', project_6_image_url);\r",
							"    const storage_bucket_url = pm.environment.get('storage_bucket_url');\r",
							"    pm.expect(project_6_image_url).to.contain(storage_bucket_url);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{teacher_2_password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{teacher_2_id}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "image",
							"type": "file",
							"src": "proj6-beaver.jpg"
						}
					],
					"options": {
						"formdata": {}
					}
				},
				"url": {
					"raw": "{{app_url}}/images",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"images"
					]
				}
			},
			"response": []
		},
		{
			"name": "create project_6",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "de59215f-7ee6-43ae-bddf-ad387abbceae",
						"exec": [
							"const project_6_image_url = pm.environment.get('project_6_image_url');\r",
							"const teacher_2_id = pm.environment.get(\"teacher_2_id\");\r",
							"const project_6_attr = {\r",
							"    \"teacher_id\": teacher_2_id,\r",
							"    \"name\": \"Beaver Dams\",\r",
							"    \"data_number\": {\r",
							"        \"name\": \"Dams Observed\",\r",
							"        \"must_be_unique\": false,\r",
							"        \"number\": 0\r",
							"    },\r",
							"    \"description_image\": {\r",
							"        \"title\": \"Beaver Dam\",\r",
							"        \"url\": project_6_image_url,\r",
							"        \"alt_text\": \"A beaver dam in a pond\"\r",
							"    },\r",
							"    \"description_text\": \"Students wil find and record examples of beaver dams in nature.\"\r",
							"};\r",
							"pm.environment.set('project_6_attr', JSON.stringify(project_6_attr));"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "1fdc53c9-a361-4168-91f3-f0c872c82bfe",
						"exec": [
							"pm.test(\"201 status code\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"content is valid\", function () {\r",
							"   /* Save the id to an environment variable and verify that it is a string. */\r",
							"   let id = pm.response.json().id;\r",
							"   pm.environment.set('project_6_id', id);\r",
							"   pm.expect(id).to.be.a('string');\r",
							"\r",
							"   /* Verify that the 'self' url matches what is expected based on the id. */\r",
							"   let selfUrlExpected = pm.environment.get('app_url') + '/projects/' + id;\r",
							"   let selfUrlReceived = pm.response.json().self;\r",
							"   pm.expect(selfUrlReceived).to.equal(selfUrlExpected);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{teacher_2_password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{teacher_2_id}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{{project_6_attr}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/projects",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"projects"
					]
				}
			},
			"response": []
		},
		{
			"name": "get all projects with pagination",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "03285474-0f9f-4787-ab1f-88540b7c6476",
						"exec": [
							"/* Create environment variable with function for comparing the entity pages returned\r",
							" * by calls to getEntities to those expected, ensuring those expected\r",
							" * are included among those received. */\r",
							"pm.environment.set('compareEntityPages', JSON.stringify(\r",
							"    `{\r",
							"        const compareEntities = Function(\r",
							"            'entityReceived',\r",
							"            'entityExpected',\r",
							"            JSON.parse(pm.environment.get('compareEntities'))\r",
							"        );\r",
							"\r",
							"        const allExpectedEntitiesIncluded = function(\r",
							"            allEntitiesReceived, \r",
							"            allEntitiesExpected\r",
							"        ) {\r",
							"            for (const entityExpected of allEntitiesExpected) {\r",
							"                const filteredEntities = allEntitiesReceived.filter(\r",
							"                    entityReceived => entityReceived.id === entityExpected.id\r",
							"                );\r",
							"                if (filteredEntities.length !== 1) {\r",
							"                    return false;\r",
							"                } else {\r",
							"                    const entityReceived = filteredEntities[0];\r",
							"                    if (compareEntities(entityReceived, entityExpected) === false) {\r",
							"                        return false;\r",
							"                    }\r",
							"                }\r",
							"            }\r",
							"\r",
							"            return true;\r",
							"        };\r",
							"\r",
							"        const addAllEntities = function(\r",
							"            allEntitiesReceived, \r",
							"            allEntitiesExpected, \r",
							"            currentPage\r",
							"        ) {\r",
							"            Array.prototype.push.apply(allEntitiesReceived, currentPage.entities);\r",
							"            if (currentPage.next !== null) {\r",
							"                pm.sendRequest(currentPage.next, function(err, res) {\r",
							"                    pm.test('additional results page has 200 status code', () => {\r",
							"                        pm.expect(res.code).to.equal(200);\r",
							"                    });\r",
							"                    const nextPage = res.json();\r",
							"                    addAllEntities(\r",
							"                        allEntitiesReceived, \r",
							"                        allEntitiesExpected, \r",
							"                        nextPage\r",
							"                    );\r",
							"                });\r",
							"            } else {\r",
							"                const included = allExpectedEntitiesIncluded(\r",
							"                    allEntitiesReceived, \r",
							"                    allEntitiesExpected\r",
							"                );\r",
							"                pm.test('all expected entities are included in the pages of results', () => {\r",
							"                    pm.expect(included).to.be.true;\r",
							"                });\r",
							"            }\r",
							"        };\r",
							"\r",
							"        addAllEntities([], allEntitiesExpected, currentPage);\r",
							"    }`\r",
							"));\r",
							"\r",
							"/* Store expected project entities in an environment variable. */\r",
							"const app_url = pm.environment.get('app_url');\r",
							"\r",
							"const project_1_attr = JSON.parse(pm.environment.get('project_1_attr'));\r",
							"const project_1_id = pm.environment.get('project_1_id');\r",
							"project_1_attr.id = project_1_id;\r",
							"project_1_attr.self = app_url + \"/projects/\" + project_1_id;\r",
							"project_1_attr.teacher = {\r",
							"    \"id\": project_1_attr.teacher_id,\r",
							"    \"self\": app_url + \"/teachers/\" + project_1_attr.teacher_id\r",
							"};\r",
							"delete project_1_attr.teacher_id;\r",
							"\r",
							"const project_2_attr = JSON.parse(pm.environment.get('project_2_attr'));\r",
							"const project_2_id = pm.environment.get('project_2_id');\r",
							"project_2_attr.id = project_2_id;\r",
							"project_2_attr.self = app_url + \"/projects/\" + project_2_id;\r",
							"project_2_attr.teacher = {\r",
							"    \"id\": project_2_attr.teacher_id,\r",
							"    \"self\": app_url + \"/teachers/\" + project_2_attr.teacher_id\r",
							"};\r",
							"delete project_2_attr.teacher_id;\r",
							"\r",
							"const project_3_attr = JSON.parse(pm.environment.get('project_3_attr'));\r",
							"const project_3_id = pm.environment.get('project_3_id');\r",
							"project_3_attr.id = project_3_id;\r",
							"project_3_attr.self = app_url + \"/projects/\" + project_3_id;\r",
							"project_3_attr.teacher = {\r",
							"    \"id\": project_3_attr.teacher_id,\r",
							"    \"self\": app_url + \"/teachers/\" + project_3_attr.teacher_id\r",
							"};\r",
							"delete project_3_attr.teacher_id;\r",
							"\r",
							"const project_4_attr = JSON.parse(pm.environment.get('project_4_attr'));\r",
							"const project_4_id = pm.environment.get('project_4_id');\r",
							"project_4_attr.id = project_4_id;\r",
							"project_4_attr.self = app_url + \"/projects/\" + project_4_id;\r",
							"project_4_attr.teacher = {\r",
							"    \"id\": project_4_attr.teacher_id,\r",
							"    \"self\": app_url + \"/teachers/\" + project_4_attr.teacher_id\r",
							"};\r",
							"delete project_4_attr.teacher_id;\r",
							"\r",
							"const project_5_attr = JSON.parse(pm.environment.get('project_5_attr'));\r",
							"const project_5_id = pm.environment.get('project_5_id');\r",
							"project_5_attr.id = project_5_id;\r",
							"project_5_attr.self = app_url + \"/projects/\" + project_5_id;\r",
							"project_5_attr.teacher = {\r",
							"    \"id\": project_5_attr.teacher_id,\r",
							"    \"self\": app_url + \"/teachers/\" + project_5_attr.teacher_id\r",
							"};\r",
							"delete project_5_attr.teacher_id;\r",
							"\r",
							"const project_6_attr = JSON.parse(pm.environment.get('project_6_attr'));\r",
							"const project_6_id = pm.environment.get('project_6_id');\r",
							"project_6_attr.id = project_6_id;\r",
							"project_6_attr.self = app_url + \"/projects/\" + project_6_id;\r",
							"project_6_attr.teacher = {\r",
							"    \"id\": project_6_attr.teacher_id,\r",
							"    \"self\": app_url + \"/teachers/\" + project_6_attr.teacher_id\r",
							"};\r",
							"delete project_6_attr.teacher_id;\r",
							"\r",
							"const projects_expected = [\r",
							"    project_1_attr,\r",
							"    project_2_attr,\r",
							"    project_3_attr,\r",
							"    project_4_attr,\r",
							"    project_5_attr,\r",
							"    project_6_attr\r",
							"];\r",
							"pm.environment.set('projects_expected', JSON.stringify(projects_expected));"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "c2638d86-6ee7-4e63-a7a0-ba797e1b70e3",
						"exec": [
							"const compareEntityPages = Function(\r",
							"    'pm',\r",
							"    'allEntitiesExpected',\r",
							"    'currentPage',\r",
							"    JSON.parse(pm.environment.get('compareEntityPages'))\r",
							");\r",
							"\r",
							"pm.test(\"200 status code\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"only correct number of projects in response\", function () {\r",
							"    const numProjectsExpected = 5;\r",
							"    const numProjectsReceived = pm.response.json().entities.length;\r",
							"    pm.expect(numProjectsReceived).to.equal(numProjectsExpected);\r",
							"});\r",
							"\r",
							"pm.test(\"next property exists\", function () {\r",
							"    const nextExists = Object.keys(pm.response.json()).includes(\"next\");\r",
							"    pm.expect(nextExists).to.be.true;\r",
							"});\r",
							"\r",
							"/* Get array of all entities received across all pages of results,\r",
							" * ensuring that all entities expected are included in it via test embedded\r",
							" * in function after last page of results received. */\r",
							"const allEntitiesExpected = JSON.parse(pm.environment.get('projects_expected'));\r",
							"const startingPage = pm.response.json();\r",
							"compareEntityPages(\r",
							"    pm,\r",
							"    allEntitiesExpected, \r",
							"    startingPage\r",
							");\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/projects",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"projects"
					]
				}
			},
			"response": []
		},
		{
			"name": "get projects invalid cursor",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4a106d64-aebd-41ba-a87a-cb57c7bcda4b",
						"exec": [
							"pm.test('403 status code', () => {\r",
							"    pm.response.to.have.status(403);\r",
							"});\r",
							"\r",
							"pm.test('correct error message', () => {\r",
							"    const messageExpected = \"The start cursor provided is not a valid Datastore cursor.\";\r",
							"    const messageReceived = pm.response.json().error;\r",
							"    pm.expect(messageReceived).to.equal(messageExpected);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/projects?start=foobar",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"projects"
					],
					"query": [
						{
							"key": "start",
							"value": "foobar"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "get all projects of teacher_1",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "ed104f73-a39d-4422-8ea4-7ecdde366a94",
						"exec": [
							"pm.test('200 status code', () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/teachers/{{teacher_1_id}}/projects",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"teachers",
						"{{teacher_1_id}}",
						"projects"
					]
				}
			},
			"response": []
		},
		{
			"name": "get all projects of teacher_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "ed104f73-a39d-4422-8ea4-7ecdde366a94",
						"exec": [
							"pm.test('200 status code', () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/teachers/{{teacher_2_id}}/projects",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"teachers",
						"{{teacher_2_id}}",
						"projects"
					]
				}
			},
			"response": []
		},
		{
			"name": "get all projects of nonexistent teacher",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "ed104f73-a39d-4422-8ea4-7ecdde366a94",
						"exec": [
							"pm.test('404 status code', () => {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test('correct error message', () => {\r",
							"    const messageExpected = \"The teacher with teacher_id cannot be found.\";\r",
							"    const messageReceived = pm.response.json().error;\r",
							"    pm.expect(messageReceived).to.equal(messageExpected);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/teachers/{{nonexistent_entity_id}}/projects",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"teachers",
						"{{nonexistent_entity_id}}",
						"projects"
					]
				}
			},
			"response": []
		},
		{
			"name": "get all projects of bad format teacher_id",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "ed104f73-a39d-4422-8ea4-7ecdde366a94",
						"exec": [
							"pm.test('400 status code', () => {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test('correct error message', () => {\r",
							"    const messageExpected = \"All IDs must be positive integers.\";\r",
							"    const messageReceived = pm.response.json().error;\r",
							"    pm.expect(messageReceived).to.equal(messageExpected);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/teachers/{{bad_format_entity_id}}/projects",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"teachers",
						"{{bad_format_entity_id}}",
						"projects"
					]
				}
			},
			"response": []
		},
		{
			"name": "upload observation_1_1 image",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "9388f4f7-7f8d-4a1d-b5fc-8064f50a79d5",
						"exec": [
							"pm.test('201 status code', () => {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test('content is valid', () => {\r",
							"    const observation_1_1_image_url = pm.response.json().publicUrl;\r",
							"    pm.environment.set('observation_1_1_image_url', observation_1_1_image_url);\r",
							"    const storage_bucket_url = pm.environment.get('storage_bucket_url');\r",
							"    pm.expect(observation_1_1_image_url).to.contain(storage_bucket_url);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{teacher_1_password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{teacher_1_id}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "image",
							"type": "file",
							"src": "obs1_1-goldfinch.jpg"
						}
					],
					"options": {
						"formdata": {}
					}
				},
				"url": {
					"raw": "{{app_url}}/images",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"images"
					]
				}
			},
			"response": []
		},
		{
			"name": "create new observation",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "0d5d12ef-9353-45b7-a965-8e52e0f47c27",
						"exec": [
							"const observation_1_1_image_url = pm.environment.get('observation_1_1_image_url');\r",
							"const observation_1_1_attr = JSON.stringify({\r",
							"    \"date\": \"2020-10-01T08:01:00.5Z\",\r",
							"    \"data_image\": {\r",
							"        \"title\": \"American Goldfinch\",\r",
							"        \"url\": observation_1_1_image_url,\r",
							"        \"alt_text\": \"An American Goldfinch.\"\r",
							"    },\r",
							"    \"data_number\": {\r",
							"        \"description\": \"American Goldfinch\",\r",
							"        \"quantity\": 1\r",
							"    },\r",
							"    \"data_description\": \"I found this American Goldfinch on a walk with my family!\"\r",
							"});\r",
							"pm.environment.set('observation_1_1_attr', observation_1_1_attr);\r",
							"\r",
							"/* Get project_1 data before POST. */\r",
							"const app_url = pm.environment.get('app_url');\r",
							"const project_1_id = pm.environment.get('project_1_id');\r",
							"pm.sendRequest(`${app_url}/projects/${project_1_id}`, function(err, res) {\r",
							"    pm.environment.set('preRequestCode', res.code);\r",
							"    pm.environment.set('preRequestDataNumber', res.json().data_number.number);\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "5308f67f-48c7-4283-bb30-f309fefdd934",
						"exec": [
							"pm.test(\"201 status code\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"/* Get constants utilized in next couple tests. */\r",
							"const app_url = pm.environment.get('app_url');\r",
							"const project_1_id = pm.environment.get('project_1_id');\r",
							"\r",
							"pm.test(\"content is valid\", function () {\r",
							"   /* Save the id to an environment variable and verify that it is a string. */\r",
							"   let id = pm.response.json().id;\r",
							"   pm.environment.set('observation_1_1_id', id);\r",
							"   pm.expect(id).to.be.a('string');\r",
							"\r",
							"   /* Verify that the 'self' url matches what is expected based on the id. */\r",
							"   let selfUrlExpected = `${app_url}/projects/${project_1_id}/observations/${id}`;\r",
							"   let selfUrlReceived = pm.response.json().self;\r",
							"   pm.expect(selfUrlReceived).to.equal(selfUrlExpected);\r",
							"});\r",
							"\r",
							"/* Ensure that project_1's data_number.number value has increased by 1 after update. */\r",
							"pm.sendRequest(`${app_url}/projects/${project_1_id}`, function(err, res) {\r",
							"    pm.test('GET project before POST 200 status code', () => {\r",
							"        const preRequestCode = pm.environment.get('preRequestCode');\r",
							"        pm.environment.unset('preRequestCode');\r",
							"        pm.expect(preRequestCode).to.equal(200);\r",
							"    });\r",
							"    \r",
							"    pm.test('GET project after POST 200 status code', () => {\r",
							"        pm.expect(res.code).to.equal(200);\r",
							"    });\r",
							"    \r",
							"    pm.test(\r",
							"        'project_1 data_number.number value correct after observation posted', \r",
							"    () => {\r",
							"        const preRequestDataNumber = pm.environment.get('preRequestDataNumber');\r",
							"        pm.environment.unset('preRequestDataNumber');\r",
							"\r",
							"        const numberExpected = preRequestDataNumber + 1;\r",
							"        const numberReceived = res.json().data_number.number;\r",
							"        pm.expect(numberReceived).to.equal(numberExpected);\r",
							"    });\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "username",
							"value": "{{teacher_1_id}}",
							"type": "string"
						},
						{
							"key": "password",
							"value": "{{teacher_1_password}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{{observation_1_1_attr}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/projects/{{project_1_id}}/observations",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"projects",
						"{{project_1_id}}",
						"observations"
					]
				}
			},
			"response": []
		},
		{
			"name": "create new observation at root level",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "a26a59d7-a895-43b3-b18e-0308715e5343",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "5d3a07fb-7e9f-400f-b4c6-a0d668274e83",
						"exec": [
							"pm.test(\"404 status code\", () => {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test('correct error message', () => {\r",
							"    const messageExpected = \"The collection you are seeking does not exist.\";\r",
							"    const messageReceived = pm.response.json().error;\r",
							"    pm.expect(messageReceived).to.equal(messageExpected);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{app_url}}/observations",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"observations"
					]
				}
			},
			"response": []
		},
		{
			"name": "create new observation nonexistent project id",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "1ba1144c-6eaa-4019-b59d-4fbd34c5530f",
						"exec": [
							"pm.test('404 status code', () => {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test('correct error message', () => {\r",
							"    const messageExpected = \"The project with project_id cannot be found.\";\r",
							"    const messageReceived = pm.response.json().error;\r",
							"    pm.expect(messageReceived).to.equal(messageExpected);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"date\": \"2020-10-01T08:01:00.5Z\",\r\n    \"data_image\": {\r\n        \"title\": \"American Goldfinch\",\r\n        \"url\": \"{{observation_1_1_image_url}}\",\r\n        \"alt_text\": \"An American Goldfinch.\"\r\n    },\r\n    \"data_number\": {\r\n        \"description\": \"American Goldfinch\",\r\n        \"quantity\": 1\r\n    },\r\n    \"data_description\": \"I found this American Goldfinch on a walk with my family!\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/projects/{{nonexistent_entity_id}}/observations",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"projects",
						"{{nonexistent_entity_id}}",
						"observations"
					]
				}
			},
			"response": []
		},
		{
			"name": "create new observation bad format project id",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "56682bb6-72fa-4ff7-90fe-75a6edc16fa0",
						"exec": [
							"pm.test('400 status code', () => {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test('correct error message', () => {\r",
							"    const messageExpected = \"All IDs must be positive integers.\";\r",
							"    const messageReceived = pm.response.json().error;\r",
							"    pm.expect(messageReceived).to.equal(messageExpected);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"date\": \"2020-10-01T08:01:00.5Z\",\r\n    \"data_image\": {\r\n        \"title\": \"American Goldfinch\",\r\n        \"url\": \"{{observation_1_1_image_url}}\",\r\n        \"alt_text\": \"An American Goldfinch.\"\r\n    },\r\n    \"data_number\": {\r\n        \"description\": \"American Goldfinch\",\r\n        \"quantity\": 1\r\n    },\r\n    \"data_description\": \"I found this American Goldfinch on a walk with my family!\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/projects/{{bad_format_entity_id}}/observations",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"projects",
						"{{bad_format_entity_id}}",
						"observations"
					]
				}
			},
			"response": []
		},
		{
			"name": "create new observation incorrect variable type",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "c739aab8-1c1a-4aef-8396-c65f3817301b",
						"exec": [
							"pm.test('400 status code', () => {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test('correct error message', () => {\r",
							"    const messageExpected = \"At least one parameter was missing, invalid, or extraneous.\";\r",
							"    const messageReceived = pm.response.json().error;\r",
							"    pm.expect(messageReceived).to.equal(messageExpected);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"date\": \"2020-10-01T08:01:00.5Z\",\r\n    \"data_image\": {\r\n        \"title\": \"American Goldfinch\",\r\n        \"url\": true,\r\n        \"alt_text\": \"An American Goldfinch.\"\r\n    },\r\n    \"data_number\": {\r\n        \"description\": \"American Goldfinch\",\r\n        \"quantity\": 1\r\n    },\r\n    \"data_description\": \"I found this American Goldfinch on a walk with my family!\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/projects/{{project_1_id}}/observations",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"projects",
						"{{project_1_id}}",
						"observations"
					]
				}
			},
			"response": []
		},
		{
			"name": "create new observation missing property",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "b9e5a034-fcd2-4269-814d-ca880f4b0373",
						"exec": [
							"pm.test('400 status code', () => {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test('correct error message', () => {\r",
							"    const messageExpected = \"At least one parameter was missing, invalid, or extraneous.\";\r",
							"    const messageReceived = pm.response.json().error;\r",
							"    pm.expect(messageReceived).to.equal(messageExpected);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"data_image\": {\r\n        \"title\": \"American Goldfinch\",\r\n        \"url\": \"{{observation_1_1_image_url}}\",\r\n        \"alt_text\": \"An American Goldfinch.\"\r\n    },\r\n    \"data_number\": {\r\n        \"description\": \"American Goldfinch\",\r\n        \"quantity\": 1\r\n    },\r\n    \"data_description\": \"I found this American Goldfinch on a walk with my family!\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/projects/{{project_1_id}}/observations",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"projects",
						"{{project_1_id}}",
						"observations"
					]
				}
			},
			"response": []
		},
		{
			"name": "create new observation missing subproperty",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "f06d3994-5926-4e1d-9198-08fdda56b19e",
						"exec": [
							"pm.test('400 status code', () => {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test('correct error message', () => {\r",
							"    const messageExpected = \"At least one parameter was missing, invalid, or extraneous.\";\r",
							"    const messageReceived = pm.response.json().error;\r",
							"    pm.expect(messageReceived).to.equal(messageExpected);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"date\": \"2020-10-01T08:01:00.5Z\",\r\n    \"data_image\": {\r\n        \"title\": \"American Goldfinch\",\r\n        \"url\": \"{{observation_1_1_image_url}}\",\r\n        \"alt_text\": \"An American Goldfinch.\"\r\n    },\r\n    \"data_number\": {\r\n        \"quantity\": 1\r\n    },\r\n    \"data_description\": \"I found this American Goldfinch on a walk with my family!\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/projects/{{project_1_id}}/observations",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"projects",
						"{{project_1_id}}",
						"observations"
					]
				}
			},
			"response": []
		},
		{
			"name": "create new observation with extraneous property",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "e6233490-ef00-4317-abe0-86777477658c",
						"exec": [
							"pm.test('400 status code', () => {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test('correct error message', () => {\r",
							"    const messageExpected = \"At least one parameter was missing, invalid, or extraneous.\";\r",
							"    const messageReceived = pm.response.json().error;\r",
							"    pm.expect(messageReceived).to.equal(messageExpected);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"date\": \"2020-10-01T08:01:00.5Z\",\r\n    \"data_image\": {\r\n        \"title\": \"American Goldfinch\",\r\n        \"url\": \"{{observation_1_1_image_url}}\",\r\n        \"alt_text\": \"An American Goldfinch.\"\r\n    },\r\n    \"data_number\": {\r\n        \"description\": \"American Goldfinch\",\r\n        \"quantity\": 1\r\n    },\r\n    \"data_description\": \"I found this American Goldfinch on a walk with my family!\",\r\n    \"roller_coasters_are_awesome\": true\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/projects/{{project_1_id}}/observations",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"projects",
						"{{project_1_id}}",
						"observations"
					]
				}
			},
			"response": []
		},
		{
			"name": "create new observation with extraneous subproperty",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "eca668de-a562-4475-ac07-a52d84db2636",
						"exec": [
							"pm.test('400 status code', () => {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test('correct error message', () => {\r",
							"    const messageExpected = \"At least one parameter was missing, invalid, or extraneous.\";\r",
							"    const messageReceived = pm.response.json().error;\r",
							"    pm.expect(messageReceived).to.equal(messageExpected);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"date\": \"2020-10-01T08:01:00.5Z\",\r\n    \"data_image\": {\r\n        \"title\": \"American Goldfinch\",\r\n        \"url\": \"{{observation_1_1_image_url}}\",\r\n        \"alt_text\": \"An American Goldfinch.\",\r\n        \"foo\": \"bar\"\r\n    },\r\n    \"data_number\": {\r\n        \"description\": \"American Goldfinch\",\r\n        \"quantity\": 1\r\n    },\r\n    \"data_description\": \"I found this American Goldfinch on a walk with my family!\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/projects/{{project_1_id}}/observations",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"projects",
						"{{project_1_id}}",
						"observations"
					]
				}
			},
			"response": []
		},
		{
			"name": "create observation empty string property",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "9c956d9c-5b98-47d0-9557-ed47dbfff321",
						"exec": [
							"pm.test('400 status code', () => {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test('correct error message', () => {\r",
							"    const messageExpected = \"At least one parameter was missing, invalid, or extraneous.\";\r",
							"    const messageReceived = pm.response.json().error;\r",
							"    pm.expect(messageReceived).to.equal(messageExpected);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"date\": \"2020-10-01T08:01:00.5Z\",\r\n    \"data_image\": {\r\n        \"title\": \"American Goldfinch\",\r\n        \"url\": \"{{observation_1_1_image_url}}\",\r\n        \"alt_text\": \"An American Goldfinch.\"\r\n    },\r\n    \"data_number\": {\r\n        \"description\": \"American Goldfinch\",\r\n        \"quantity\": 1\r\n    },\r\n    \"data_description\": \"\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/projects/{{project_1_id}}/observations",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"projects",
						"{{project_1_id}}",
						"observations"
					]
				}
			},
			"response": []
		},
		{
			"name": "create observation empty string subproperty",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "47124ecd-7ee8-472b-9a6a-de053cd0d9e1",
						"exec": [
							"pm.test('400 status code', () => {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test('correct error message', () => {\r",
							"    const messageExpected = \"At least one parameter was missing, invalid, or extraneous.\";\r",
							"    const messageReceived = pm.response.json().error;\r",
							"    pm.expect(messageReceived).to.equal(messageExpected);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"date\": \"2020-10-01T08:01:00.5Z\",\r\n    \"data_image\": {\r\n        \"title\": \"American Goldfinch\",\r\n        \"url\": \"{{observation_1_1_image_url}}\",\r\n        \"alt_text\": \"An American Goldfinch.\"\r\n    },\r\n    \"data_number\": {\r\n        \"description\": \"\",\r\n        \"quantity\": 1\r\n    },\r\n    \"data_description\": \"I found this American Goldfinch on a walk with my family!\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/projects/{{project_1_id}}/observations",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"projects",
						"{{project_1_id}}",
						"observations"
					]
				}
			},
			"response": []
		},
		{
			"name": "create new observation bad format image url",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "c0368427-4770-4f97-af1d-ae2a37544d05",
						"exec": [
							"pm.test('400 status code', () => {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test('correct error message', () => {\r",
							"    const messageExpected = 'The image URL provided is improperly formatted, the image does not exist, or the image is not in an acceptable format';\r",
							"    const messageReceived = pm.response.json().error;\r",
							"    pm.expect(messageReceived).to.equal(messageExpected);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"date\": \"2020-10-01T08:01:00.5Z\",\r\n    \"data_image\": {\r\n        \"title\": \"American Goldfinch\",\r\n        \"url\": \"http://foo/bar/baz/bop\",\r\n        \"alt_text\": \"An American Goldfinch.\"\r\n    },\r\n    \"data_number\": {\r\n        \"description\": \"American Goldfinch\",\r\n        \"quantity\": 1\r\n    },\r\n    \"data_description\": \"I found this American Goldfinch on a walk with my family!\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/projects/{{project_1_id}}/observations",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"projects",
						"{{project_1_id}}",
						"observations"
					]
				}
			},
			"response": []
		},
		{
			"name": "create new observation image does not exist",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "2df06cbd-dd8c-4af7-a1f4-68fe2bd6ffe5",
						"exec": [
							"pm.test('400 status code', () => {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test('correct error message', () => {\r",
							"    const messageExpected = 'The image URL provided is improperly formatted, the image does not exist, or the image is not in an acceptable format';\r",
							"    const messageReceived = pm.response.json().error;\r",
							"    pm.expect(messageReceived).to.equal(messageExpected);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"date\": \"2020-10-01T08:01:00.5Z\",\r\n    \"data_image\": {\r\n        \"title\": \"American Goldfinch\",\r\n        \"url\": \"https://storage.googleapis.com/kidizen-science-images/foo.jpg\",\r\n        \"alt_text\": \"An American Goldfinch.\"\r\n    },\r\n    \"data_number\": {\r\n        \"description\": \"American Goldfinch\",\r\n        \"quantity\": 1\r\n    },\r\n    \"data_description\": \"I found this American Goldfinch on a walk with my family!\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/projects/{{project_1_id}}/observations",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"projects",
						"{{project_1_id}}",
						"observations"
					]
				}
			},
			"response": []
		},
		{
			"name": "create new observation unsupported media type",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "f90c85b1-382c-4ad7-b250-df761c338453",
						"exec": [
							"pm.test('415 status code', () => {\r",
							"    pm.response.to.have.status(415);\r",
							"});\r",
							"\r",
							"pm.test('correct error message', () => {\r",
							"    const messageExpected = 'This endpoint only accepts content of type application/json';\r",
							"    const messageReceived = pm.response.json().error;\r",
							"    pm.expect(messageReceived).to.equal(messageExpected);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "<ul>\r\n    <li>Name: Look at this American Goldfinch!</li>\r\n</ul>",
					"options": {
						"raw": {
							"language": "html"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/projects/{{project_1_id}}/observations",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"projects",
						"{{project_1_id}}",
						"observations"
					]
				}
			},
			"response": []
		},
		{
			"name": "get observation just created",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "421a1b32-1977-4569-a609-e06b25ef08dc",
						"exec": [
							"/* Import compareEntities function from environment variable. */\r",
							"const compareEntities = Function(\r",
							"    'entityReceived',\r",
							"    'entityExpected',\r",
							"    JSON.parse(pm.environment.get('compareEntities'))\r",
							");\r",
							"\r",
							"\r",
							"pm.test(\"200 status code\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"content is valid\", function () {\r",
							"    /* Get the attributes expected based on the body of the POST request to create\r",
							"     * observation_1_1. */\r",
							"    const attrExpected = JSON.parse(pm.environment.get('observation_1_1_attr'));\r",
							"\r",
							"    /* Add expected id and self attributes. */\r",
							"    const observationId = pm.environment.get('observation_1_1_id');\r",
							"    attrExpected.id = observationId;\r",
							"    const appUrl = pm.environment.get('app_url');\r",
							"    const projectId = pm.environment.get('project_1_id');\r",
							"    attrExpected.self = `${appUrl}/projects/${projectId}/observations/${observationId}`;\r",
							"\r",
							"    /* Replace project_id property with project containing id and self. */\r",
							"    delete attrExpected.project_id;\r",
							"    attrExpected.project = {\r",
							"        \"id\": projectId,\r",
							"        \"self\": `${appUrl}/projects/${projectId}`\r",
							"    };\r",
							"\r",
							"    /* Verify that the exact same set of properties with the exact same values\r",
							"     * were received and expected. */\r",
							"    const attrReceived = pm.response.json();\r",
							"    let observationsMatch = compareEntities(attrReceived, attrExpected);\r",
							"    pm.expect(observationsMatch).to.be.true;\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "73a97842-92f7-4501-a074-23bcce9180ef",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/projects/{{project_1_id}}/observations/{{observation_1_1_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"projects",
						"{{project_1_id}}",
						"observations",
						"{{observation_1_1_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get observation at root level",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "81dee5eb-3298-49dd-8b7e-b32f945f88c5",
						"exec": [
							"pm.test(\"404 status code\", () => {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test('correct error message', () => {\r",
							"    const messageExpected = \"The collection you are seeking does not exist.\";\r",
							"    const messageReceived = pm.response.json().error;\r",
							"    pm.expect(messageReceived).to.equal(messageExpected);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "539e5573-b7ab-43ad-9445-d96a378f3f1c",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/observations/{{observation_1_1_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"observations",
						"{{observation_1_1_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get observation with nonexistent project_id",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "dd74a998-d6ab-4a49-9ce3-482bd362929a",
						"exec": [
							"pm.test('404 status code', () => {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test('correct error message', () => {\r",
							"    const messageExpected = \"The item you requested could not be found.\";\r",
							"    const messageReceived = pm.response.json().error;\r",
							"    pm.expect(messageReceived).to.equal(messageExpected);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/projects/{{nonexistent_entity_id}}/observations/{{observation_1_1_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"projects",
						"{{nonexistent_entity_id}}",
						"observations",
						"{{observation_1_1_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get observation with nonexistent observation_id",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "555fbb5e-41ea-4758-92d4-3cd93b99d38a",
						"exec": [
							"pm.test('404 status code', () => {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test('correct error message', () => {\r",
							"    const messageExpected = \"The item you requested could not be found.\";\r",
							"    const messageReceived = pm.response.json().error;\r",
							"    pm.expect(messageReceived).to.equal(messageExpected);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/projects/{{project_1_id}}/observations/{{nonexistent_entity_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"projects",
						"{{project_1_id}}",
						"observations",
						"{{nonexistent_entity_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get observation with nonexistent project_id and nonexistent observation_id",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "c9b3dc00-a962-4d4a-8c22-9f9eaaad93ed",
						"exec": [
							"pm.test('404 status code', () => {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test('correct error message', () => {\r",
							"    const messageExpected = \"The item you requested could not be found.\";\r",
							"    const messageReceived = pm.response.json().error;\r",
							"    pm.expect(messageReceived).to.equal(messageExpected);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/projects/{{nonexistent_entity_id}}/observations/{{nonexistent_entity_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"projects",
						"{{nonexistent_entity_id}}",
						"observations",
						"{{nonexistent_entity_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get observation with bad format project_id",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "f14f13cb-3e06-4356-b550-7f9618605c4d",
						"exec": [
							"pm.test('400 status code', () => {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test('correct error message', () => {\r",
							"    const messageExpected = \"All IDs must be positive integers.\";\r",
							"    const messageReceived = pm.response.json().error;\r",
							"    pm.expect(messageReceived).to.equal(messageExpected);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/projects/{{bad_format_entity_id}}/observations/{{observation_1_1_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"projects",
						"{{bad_format_entity_id}}",
						"observations",
						"{{observation_1_1_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get observation with bad format observation_id",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4919f6dc-994e-4d9e-be4c-3e4214eea581",
						"exec": [
							"pm.test('400 status code', () => {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test('correct error message', () => {\r",
							"    const messageExpected = \"All IDs must be positive integers.\";\r",
							"    const messageReceived = pm.response.json().error;\r",
							"    pm.expect(messageReceived).to.equal(messageExpected);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/projects/{{project_1_id}}/observations/{{bad_format_entity_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"projects",
						"{{project_1_id}}",
						"observations",
						"{{bad_format_entity_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get observation with bad format project_id and bad format observation_id",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "5185a441-c7de-49b6-82f2-3edc0fb85488",
						"exec": [
							"pm.test('400 status code', () => {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test('correct error message', () => {\r",
							"    const messageExpected = \"All IDs must be positive integers.\";\r",
							"    const messageReceived = pm.response.json().error;\r",
							"    pm.expect(messageReceived).to.equal(messageExpected);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/projects/{{bad_format_entity_id}}/observations/{{bad_format_entity_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"projects",
						"{{bad_format_entity_id}}",
						"observations",
						"{{bad_format_entity_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "upload observation_1_2 image",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "165d6638-3353-48c4-bc6c-21cc6fec11b7",
						"exec": [
							"pm.test('201 status code', () => {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test('content is valid', () => {\r",
							"    const observation_1_2_image_url = pm.response.json().publicUrl;\r",
							"    pm.environment.set('observation_1_2_image_url', observation_1_2_image_url);\r",
							"    const storage_bucket_url = pm.environment.get('storage_bucket_url');\r",
							"    pm.expect(observation_1_2_image_url).to.contain(storage_bucket_url);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{teacher_1_password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{teacher_1_id}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "image",
							"type": "file",
							"src": "obs_1_2-bluebird.jpg"
						}
					],
					"options": {
						"formdata": {}
					}
				},
				"url": {
					"raw": "{{app_url}}/images",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"images"
					]
				}
			},
			"response": []
		},
		{
			"name": "create observation_1_2",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "c41bc9e2-1cb8-43a9-b9f8-b5662a0c12f5",
						"exec": [
							"const observation_1_2_image_url = pm.environment.get('observation_1_2_image_url');\r",
							"const observation_1_2_attr = JSON.stringify({\r",
							"    \"date\": \"2020-10-11T11:11:11.11Z\",\r",
							"    \"data_image\": {\r",
							"        \"title\": \"Western Bluebird\",\r",
							"        \"url\": observation_1_2_image_url,\r",
							"        \"alt_text\": \"A Western Bluebird with blue and orange colors.\"\r",
							"    },\r",
							"    \"data_number\": {\r",
							"        \"description\": \"Western Bluebird\",\r",
							"        \"quantity\": 1\r",
							"    },\r",
							"    \"data_description\": \"I saw this Western Bluebird out my window!\"\r",
							"});\r",
							"pm.environment.set('observation_1_2_attr', observation_1_2_attr);\r",
							"console.log(observation_1_2_attr);\r",
							"\r",
							"/* Get project_1 data before POST. */\r",
							"const app_url = pm.environment.get('app_url');\r",
							"const project_1_id = pm.environment.get('project_1_id');\r",
							"pm.sendRequest(`${app_url}/projects/${project_1_id}`, function(err, res) {\r",
							"    pm.environment.set('preRequestCode', res.code);\r",
							"    pm.environment.set('preRequestDataNumber', res.json().data_number.number);\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "25ced996-2ae5-41dc-a279-831fd73928bc",
						"exec": [
							"pm.test(\"201 status code\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"/* Get constants utilized in next couple tests. */\r",
							"const app_url = pm.environment.get('app_url');\r",
							"const project_1_id = pm.environment.get('project_1_id');\r",
							"\r",
							"pm.test(\"content is valid\", function () {\r",
							"   /* Save the id to an environment variable and verify that it is a string. */\r",
							"   let id = pm.response.json().id;\r",
							"   pm.environment.set('observation_1_2_id', id);\r",
							"   pm.expect(id).to.be.a('string');\r",
							"\r",
							"   /* Verify that the 'self' url matches what is expected based on the id. */\r",
							"   let selfUrlExpected = `${app_url}/projects/${project_1_id}/observations/${id}`;\r",
							"   let selfUrlReceived = pm.response.json().self;\r",
							"   pm.expect(selfUrlReceived).to.equal(selfUrlExpected);\r",
							"});\r",
							"\r",
							"/* Ensure that project_1's data_number.number value has increased by 1 after update. */\r",
							"pm.sendRequest(`${app_url}/projects/${project_1_id}`, function(err, res) {\r",
							"    pm.test('GET project before POST 200 status code', () => {\r",
							"        const preRequestCode = pm.environment.get('preRequestCode');\r",
							"        pm.environment.unset('preRequestCode');\r",
							"        pm.expect(preRequestCode).to.equal(200);\r",
							"    });\r",
							"    \r",
							"    pm.test('GET project after POST 200 status code', () => {\r",
							"        pm.expect(res.code).to.equal(200);\r",
							"    });\r",
							"    \r",
							"    pm.test(\r",
							"        'project_1 data_number.number value correct after observation posted', \r",
							"    () => {\r",
							"        const preRequestDataNumber = pm.environment.get('preRequestDataNumber');\r",
							"        pm.environment.unset('preRequestDataNumber');\r",
							"\r",
							"        const numberExpected = preRequestDataNumber + 1;\r",
							"        const numberReceived = res.json().data_number.number;\r",
							"        pm.expect(numberReceived).to.equal(numberExpected);\r",
							"    });\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "username",
							"value": "{{teacher_1_id}}",
							"type": "string"
						},
						{
							"key": "password",
							"value": "{{teacher_1_password}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{{observation_1_2_attr}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/projects/{{project_1_id}}/observations",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"projects",
						"{{project_1_id}}",
						"observations"
					]
				}
			},
			"response": []
		},
		{
			"name": "upload observation 1_3 image",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "54a51702-394a-4df1-9389-dc38065a8ca4",
						"exec": [
							"pm.test('201 status code', () => {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test('content is valid', () => {\r",
							"    const observation_1_3_image_url = pm.response.json().publicUrl;\r",
							"    pm.environment.set('observation_1_3_image_url', observation_1_3_image_url);\r",
							"    const storage_bucket_url = pm.environment.get('storage_bucket_url');\r",
							"    pm.expect(observation_1_3_image_url).to.contain(storage_bucket_url);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{teacher_1_password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{teacher_1_id}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "image",
							"type": "file",
							"src": "obs_1_3-goldfinch2.jpg"
						}
					],
					"options": {
						"formdata": {}
					}
				},
				"url": {
					"raw": "{{app_url}}/images",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"images"
					]
				}
			},
			"response": []
		},
		{
			"name": "create observation_1_3",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "8c523d9a-72f3-432a-9981-899fe6c8b915",
						"exec": [
							"const observation_1_3_image_url = pm.environment.get('observation_1_3_image_url');\r",
							"const observation_1_3_attr = JSON.stringify({\r",
							"    \"date\": \"2020-10-07T11:51:33.627Z\",\r",
							"    \"data_image\": {\r",
							"        \"title\": \"American Goldfinch\",\r",
							"        \"url\": observation_1_3_image_url,\r",
							"        \"alt_text\": \"A different American Goldfinch.\"\r",
							"    },\r",
							"    \"data_number\":{\r",
							"        \"description\": \"American Goldfinch\",\r",
							"        \"quantity\": 1\r",
							"    },\r",
							"    \"data_description\": \"I found this American Goldfinch in my back yard.\"\r",
							"});\r",
							"pm.environment.set('observation_1_3_attr', observation_1_3_attr);\r",
							"\r",
							"/* Get project_1 data before POST. */\r",
							"const app_url = pm.environment.get('app_url');\r",
							"const project_1_id = pm.environment.get('project_1_id');\r",
							"pm.sendRequest(`${app_url}/projects/${project_1_id}`, function(err, res) {\r",
							"    pm.environment.set('preRequestCode', res.code);\r",
							"    pm.environment.set('preRequestDataNumber', res.json().data_number.number);\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "3a0594ce-7aae-4602-924c-1ff37494a9e9",
						"exec": [
							"pm.test(\"201 status code\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"/* Get constants utilized in next couple tests. */\r",
							"const app_url = pm.environment.get('app_url');\r",
							"const project_1_id = pm.environment.get('project_1_id');\r",
							"\r",
							"pm.test(\"content is valid\", function () {\r",
							"   /* Save the id to an environment variable and verify that it is a string. */\r",
							"   let id = pm.response.json().id;\r",
							"   pm.environment.set('observation_1_3_id', id);\r",
							"   pm.expect(id).to.be.a('string');\r",
							"\r",
							"   /* Verify that the 'self' url matches what is expected based on the id. */\r",
							"   let selfUrlExpected = `${app_url}/projects/${project_1_id}/observations/${id}`;\r",
							"   let selfUrlReceived = pm.response.json().self;\r",
							"   pm.expect(selfUrlReceived).to.equal(selfUrlExpected);\r",
							"});\r",
							"\r",
							"/* Ensure that project_1's data_number.number value has stayed the same after update. */\r",
							"pm.sendRequest(`${app_url}/projects/${project_1_id}`, function(err, res) {\r",
							"    pm.test('GET project before POST 200 status code', () => {\r",
							"        const preRequestCode = pm.environment.get('preRequestCode');\r",
							"        pm.environment.unset('preRequestCode');\r",
							"        pm.expect(preRequestCode).to.equal(200);\r",
							"    });\r",
							"    \r",
							"    pm.test('GET project after POST 200 status code', () => {\r",
							"        pm.expect(res.code).to.equal(200);\r",
							"    });\r",
							"    \r",
							"    pm.test(\r",
							"        'project_1 data_number.number value correct after observation posted', \r",
							"    () => {\r",
							"        const preRequestDataNumber = pm.environment.get('preRequestDataNumber');\r",
							"        pm.environment.unset('preRequestDataNumber');\r",
							"\r",
							"        const numberExpected = preRequestDataNumber;\r",
							"        const numberReceived = res.json().data_number.number;\r",
							"        pm.expect(numberReceived).to.equal(numberExpected);\r",
							"    });\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{teacher_1_password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{teacher_1_id}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{{observation_1_3_attr}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/projects/{{project_1_id}}/observations",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"projects",
						"{{project_1_id}}",
						"observations"
					]
				}
			},
			"response": []
		},
		{
			"name": "upload observation_1_4 image",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "b3810d0d-dbe1-4a1e-87db-91b22cf28b32",
						"exec": [
							"pm.test('201 status code', () => {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test('content is valid', () => {\r",
							"    const observation_1_4_image_url = pm.response.json().publicUrl;\r",
							"    pm.environment.set('observation_1_4_image_url', observation_1_4_image_url);\r",
							"    const storage_bucket_url = pm.environment.get('storage_bucket_url');\r",
							"    pm.expect(observation_1_4_image_url).to.contain(storage_bucket_url);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{teacher_1_password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{teacher_1_id}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "image",
							"type": "file",
							"src": "obs_1_4_seagull.jpg"
						}
					],
					"options": {
						"formdata": {}
					}
				},
				"url": {
					"raw": "{{app_url}}/images",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"images"
					]
				}
			},
			"response": []
		},
		{
			"name": "create observation_1_4",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "89527909-06c7-4645-aa99-3fb788c16921",
						"exec": [
							"const observation_1_4_image_url = pm.environment.get('observation_1_4_image_url');\r",
							"const observation_1_4_attr = JSON.stringify({\r",
							"    \"date\": \"2020-12-01T10:10:10.627Z\",\r",
							"    \"data_image\": {\r",
							"        \"title\": \"Seagull\",\r",
							"        \"url\": observation_1_4_image_url,\r",
							"        \"alt_text\": \"A seagull in flight.\"\r",
							"    },\r",
							"    \"data_number\":{\r",
							"        \"description\": \"Gull\",\r",
							"        \"quantity\": 1\r",
							"    },\r",
							"    \"data_description\": \"I saw this Seagull flying near the beach.\"\r",
							"});\r",
							"pm.environment.set('observation_1_4_attr', observation_1_4_attr);\r",
							"\r",
							"/* Get project_1 data before POST. */\r",
							"const app_url = pm.environment.get('app_url');\r",
							"const project_1_id = pm.environment.get('project_1_id');\r",
							"pm.sendRequest(`${app_url}/projects/${project_1_id}`, function(err, res) {\r",
							"    pm.environment.set('preRequestCode', res.code);\r",
							"    pm.environment.set('preRequestDataNumber', res.json().data_number.number);\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "c53d307c-952d-4822-b27b-729e017ad9e6",
						"exec": [
							"pm.test(\"201 status code\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"/* Get constants utilized in next couple tests. */\r",
							"const app_url = pm.environment.get('app_url');\r",
							"const project_1_id = pm.environment.get('project_1_id');\r",
							"\r",
							"pm.test(\"content is valid\", function () {\r",
							"   /* Save the id to an environment variable and verify that it is a string. */\r",
							"   let id = pm.response.json().id;\r",
							"   pm.environment.set('observation_1_4_id', id);\r",
							"   pm.expect(id).to.be.a('string');\r",
							"\r",
							"   /* Verify that the 'self' url matches what is expected based on the id. */\r",
							"   let selfUrlExpected = `${app_url}/projects/${project_1_id}/observations/${id}`;\r",
							"   let selfUrlReceived = pm.response.json().self;\r",
							"   pm.expect(selfUrlReceived).to.equal(selfUrlExpected);\r",
							"});\r",
							"\r",
							"/* Ensure that project_1's data_number.number value has increased by 1 after update. */\r",
							"pm.sendRequest(`${app_url}/projects/${project_1_id}`, function(err, res) {\r",
							"    pm.test('GET project before POST 200 status code', () => {\r",
							"        const preRequestCode = pm.environment.get('preRequestCode');\r",
							"        pm.environment.unset('preRequestCode');\r",
							"        pm.expect(preRequestCode).to.equal(200);\r",
							"    });\r",
							"    \r",
							"    pm.test('GET project after POST 200 status code', () => {\r",
							"        pm.expect(res.code).to.equal(200);\r",
							"    });\r",
							"    \r",
							"    pm.test(\r",
							"        'project_1 data_number.number value correct after observation posted', \r",
							"    () => {\r",
							"        const preRequestDataNumber = pm.environment.get('preRequestDataNumber');\r",
							"        pm.environment.unset('preRequestDataNumber');\r",
							"\r",
							"        const numberExpected = preRequestDataNumber + 1;\r",
							"        const numberReceived = res.json().data_number.number;\r",
							"        pm.expect(numberReceived).to.equal(numberExpected);\r",
							"    });\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{teacher_1_password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{teacher_1_id}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{{observation_1_4_attr}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/projects/{{project_1_id}}/observations",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"projects",
						"{{project_1_id}}",
						"observations"
					]
				}
			},
			"response": []
		},
		{
			"name": "upload observation_1_5 image",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "83e82d1f-88a2-4840-b634-fdfde1979aa7",
						"exec": [
							"pm.test('201 status code', () => {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test('content is valid', () => {\r",
							"    const observation_1_5_image_url = pm.response.json().publicUrl;\r",
							"    pm.environment.set('observation_1_5_image_url', observation_1_5_image_url);\r",
							"    const storage_bucket_url = pm.environment.get('storage_bucket_url');\r",
							"    pm.expect(observation_1_5_image_url).to.contain(storage_bucket_url);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{teacher_1_password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{teacher_1_id}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "image",
							"type": "file",
							"src": "obs_1_5_turkey-vultures_4.jpg"
						}
					],
					"options": {
						"formdata": {}
					}
				},
				"url": {
					"raw": "{{app_url}}/images",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"images"
					]
				}
			},
			"response": []
		},
		{
			"name": "create observation_1_5",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "cc5a501c-3885-49ef-a87d-32dda2916002",
						"exec": [
							"const observation_1_5_image_url = pm.environment.get('observation_1_5_image_url');\r",
							"const observation_1_5_attr = JSON.stringify({\r",
							"    \"date\": \"2021-04-04T04:44:44.444Z\",\r",
							"    \"data_image\": {\r",
							"        \"title\": \"Turkey Vultures\",\r",
							"        \"url\": observation_1_5_image_url,\r",
							"        \"alt_text\": \"4 Turkey Vultures sitting in a tree with no leaves.\"\r",
							"    },\r",
							"    \"data_number\":{\r",
							"        \"description\": \"Turkey Vulture\",\r",
							"        \"quantity\": 4\r",
							"    },\r",
							"    \"data_description\": \"I saw these 4 Turkey Vultures sitting in a tree on my street!\"\r",
							"});\r",
							"pm.environment.set('observation_1_5_attr', observation_1_5_attr);\r",
							"\r",
							"/* Get project_1 data before POST. */\r",
							"const app_url = pm.environment.get('app_url');\r",
							"const project_1_id = pm.environment.get('project_1_id');\r",
							"pm.sendRequest(`${app_url}/projects/${project_1_id}`, function(err, res) {\r",
							"    pm.environment.set('preRequestCode', res.code);\r",
							"    pm.environment.set('preRequestDataNumber', res.json().data_number.number);\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "55bd6075-0f97-41f7-9b0e-b766aa4c365e",
						"exec": [
							"pm.test(\"201 status code\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"/* Get constants utilized in next couple tests. */\r",
							"const app_url = pm.environment.get('app_url');\r",
							"const project_1_id = pm.environment.get('project_1_id');\r",
							"\r",
							"pm.test(\"content is valid\", function () {\r",
							"   /* Save the id to an environment variable and verify that it is a string. */\r",
							"   let id = pm.response.json().id;\r",
							"   pm.environment.set('observation_1_5_id', id);\r",
							"   pm.expect(id).to.be.a('string');\r",
							"\r",
							"   /* Verify that the 'self' url matches what is expected based on the id. */\r",
							"   let selfUrlExpected = `${app_url}/projects/${project_1_id}/observations/${id}`;\r",
							"   let selfUrlReceived = pm.response.json().self;\r",
							"   pm.expect(selfUrlReceived).to.equal(selfUrlExpected);\r",
							"});\r",
							"\r",
							"/* Ensure that project_1's data_number.number value has increased by 1 after update. */\r",
							"pm.sendRequest(`${app_url}/projects/${project_1_id}`, function(err, res) {\r",
							"    pm.test('GET project before POST 200 status code', () => {\r",
							"        const preRequestCode = pm.environment.get('preRequestCode');\r",
							"        pm.environment.unset('preRequestCode');\r",
							"        pm.expect(preRequestCode).to.equal(200);\r",
							"    });\r",
							"    \r",
							"    pm.test('GET project after POST 200 status code', () => {\r",
							"        pm.expect(res.code).to.equal(200);\r",
							"    });\r",
							"    \r",
							"    pm.test(\r",
							"        'project_1 data_number.number value correct after observation posted', \r",
							"    () => {\r",
							"        const preRequestDataNumber = pm.environment.get('preRequestDataNumber');\r",
							"        pm.environment.unset('preRequestDataNumber');\r",
							"\r",
							"        const numberExpected = preRequestDataNumber + 1;\r",
							"        const numberReceived = res.json().data_number.number;\r",
							"        pm.expect(numberReceived).to.equal(numberExpected);\r",
							"    });\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{teacher_1_password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{teacher_1_id}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{{observation_1_5_attr}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/projects/{{project_1_id}}/observations",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"projects",
						"{{project_1_id}}",
						"observations"
					]
				}
			},
			"response": []
		},
		{
			"name": "upload observation_1_6 image",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "b94fbc83-fad5-4ba9-9202-65604760c1ce",
						"exec": [
							"pm.test('201 status code', () => {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test('content is valid', () => {\r",
							"    const observation_1_6_image_url = pm.response.json().publicUrl;\r",
							"    pm.environment.set('observation_1_6_image_url', observation_1_6_image_url);\r",
							"    const storage_bucket_url = pm.environment.get('storage_bucket_url');\r",
							"    pm.expect(observation_1_6_image_url).to.contain(storage_bucket_url);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{teacher_1_password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{teacher_1_id}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "image",
							"type": "file",
							"src": "obs_1_6-gulls_10.jpg"
						}
					],
					"options": {
						"formdata": {}
					}
				},
				"url": {
					"raw": "{{app_url}}/images",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"images"
					]
				}
			},
			"response": []
		},
		{
			"name": "create observation_1_6",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "b6d29865-e6be-472c-97f5-5323042327a7",
						"exec": [
							"const observation_1_6_image_url = pm.environment.get('observation_1_6_image_url');\r",
							"const observation_1_6_attr = JSON.stringify({\r",
							"    \"date\": \"2021-05-06T05:56:56.565Z\",\r",
							"    \"data_image\": {\r",
							"        \"title\": \"Gulls\",\r",
							"        \"url\": observation_1_6_image_url,\r",
							"        \"alt_text\": \"10 Gulls flying.\"\r",
							"    },\r",
							"    \"data_number\":{\r",
							"        \"description\": \"Gull\",\r",
							"        \"quantity\": 10\r",
							"    },\r",
							"    \"data_description\": \"I saw these 10 Gulls flying!\"\r",
							"});\r",
							"pm.environment.set('observation_1_6_attr', observation_1_6_attr);\r",
							"\r",
							"/* Get project_1 data before POST. */\r",
							"const app_url = pm.environment.get('app_url');\r",
							"const project_1_id = pm.environment.get('project_1_id');\r",
							"pm.sendRequest(`${app_url}/projects/${project_1_id}`, function(err, res) {\r",
							"    pm.environment.set('preRequestCode', res.code);\r",
							"    pm.environment.set('preRequestDataNumber', res.json().data_number.number);\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "182597da-a1fe-48fe-ad83-54b56695099c",
						"exec": [
							"pm.test(\"201 status code\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"/* Get constants utilized in next couple tests. */\r",
							"const app_url = pm.environment.get('app_url');\r",
							"const project_1_id = pm.environment.get('project_1_id');\r",
							"\r",
							"pm.test(\"content is valid\", function () {\r",
							"   /* Save the id to an environment variable and verify that it is a string. */\r",
							"   let id = pm.response.json().id;\r",
							"   pm.environment.set('observation_1_6_id', id);\r",
							"   pm.expect(id).to.be.a('string');\r",
							"\r",
							"   /* Verify that the 'self' url matches what is expected based on the id. */\r",
							"   let selfUrlExpected = `${app_url}/projects/${project_1_id}/observations/${id}`;\r",
							"   let selfUrlReceived = pm.response.json().self;\r",
							"   pm.expect(selfUrlReceived).to.equal(selfUrlExpected);\r",
							"});\r",
							"\r",
							"/* Ensure that project_1's data_number.number value has not changed after update. */\r",
							"pm.sendRequest(`${app_url}/projects/${project_1_id}`, function(err, res) {\r",
							"    pm.test('GET project before POST 200 status code', () => {\r",
							"        const preRequestCode = pm.environment.get('preRequestCode');\r",
							"        pm.environment.unset('preRequestCode');\r",
							"        pm.expect(preRequestCode).to.equal(200);\r",
							"    });\r",
							"    \r",
							"    pm.test('GET project after POST 200 status code', () => {\r",
							"        pm.expect(res.code).to.equal(200);\r",
							"    });\r",
							"    \r",
							"    pm.test(\r",
							"        'project_1 data_number.number value correct after observation posted', \r",
							"    () => {\r",
							"        const preRequestDataNumber = pm.environment.get('preRequestDataNumber');\r",
							"        pm.environment.unset('preRequestDataNumber');\r",
							"\r",
							"        const numberExpected = preRequestDataNumber;\r",
							"        const numberReceived = res.json().data_number.number;\r",
							"        pm.expect(numberReceived).to.equal(numberExpected);\r",
							"    });\r",
							"\r",
							"    /* Update project_1 attributes expected for testing in later requests. */\r",
							"    const projects_expected = JSON.parse(pm.environment.get('projects_expected'));\r",
							"    const project_1_attr_expected = projects_expected[0];\r",
							"    project_1_attr_expected.data_number.number = res.json().data_number.number;\r",
							"    projects_expected[0] = project_1_attr_expected;\r",
							"    pm.environment.set('projects_expected', JSON.stringify(projects_expected));\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{teacher_1_password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{teacher_1_id}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{{observation_1_6_attr}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/projects/{{project_1_id}}/observations",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"projects",
						"{{project_1_id}}",
						"observations"
					]
				}
			},
			"response": []
		},
		{
			"name": "get all project_1 observations with pagination",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "d94a4c88-0b66-4f7a-98a4-3818d5514495",
						"exec": [
							"/* Store expected observation entities in an environment variable. */\r",
							"const app_url = pm.environment.get('app_url');\r",
							"const project_1_id = pm.environment.get('project_1_id');\r",
							"const project_1_self = `${app_url}/projects/${project_1_id}`;\r",
							"const obs_base_url = project_1_self + '/observations/';\r",
							"\r",
							"const observation_1_1_attr = JSON.parse(pm.environment.get('observation_1_1_attr'));\r",
							"const observation_1_1_id = pm.environment.get('observation_1_1_id');\r",
							"observation_1_1_attr.id = observation_1_1_id;\r",
							"observation_1_1_attr.self = obs_base_url + observation_1_1_id;\r",
							"\r",
							"/* All observations in this test have the same project (project_1), so\r",
							" * create the \"project\" property for project_1 to easily set it \r",
							" * for all other projects. */\r",
							"const project = {\r",
							"    \"id\": project_1_id,\r",
							"    \"self\": project_1_self\r",
							"};\r",
							"observation_1_1_attr.project = project;\r",
							"\r",
							"const observation_1_2_attr = JSON.parse(pm.environment.get('observation_1_2_attr'));\r",
							"const observation_1_2_id = pm.environment.get('observation_1_2_id');\r",
							"observation_1_2_attr.id = observation_1_2_id;\r",
							"observation_1_2_attr.self = obs_base_url + observation_1_2_id;\r",
							"observation_1_2_attr.project = project;\r",
							"\r",
							"const observation_1_3_attr = JSON.parse(pm.environment.get('observation_1_3_attr'));\r",
							"const observation_1_3_id = pm.environment.get('observation_1_3_id');\r",
							"observation_1_3_attr.id = observation_1_3_id;\r",
							"observation_1_3_attr.self = obs_base_url + observation_1_3_id;\r",
							"observation_1_3_attr.project = project;\r",
							"\r",
							"const observation_1_4_attr = JSON.parse(pm.environment.get('observation_1_4_attr'));\r",
							"const observation_1_4_id = pm.environment.get('observation_1_4_id');\r",
							"observation_1_4_attr.id = observation_1_4_id;\r",
							"observation_1_4_attr.self = obs_base_url + observation_1_4_id;\r",
							"observation_1_4_attr.project = project;\r",
							"\r",
							"const observation_1_5_attr = JSON.parse(pm.environment.get('observation_1_5_attr'));\r",
							"const observation_1_5_id = pm.environment.get('observation_1_5_id');\r",
							"observation_1_5_attr.id = observation_1_5_id;\r",
							"observation_1_5_attr.self = obs_base_url + observation_1_5_id;\r",
							"observation_1_5_attr.project = project;\r",
							"\r",
							"const observation_1_6_attr = JSON.parse(pm.environment.get('observation_1_6_attr'));\r",
							"const observation_1_6_id = pm.environment.get('observation_1_6_id');\r",
							"observation_1_6_attr.id = observation_1_6_id;\r",
							"observation_1_6_attr.self = obs_base_url + observation_1_6_id;\r",
							"observation_1_6_attr.project = project;\r",
							"\r",
							"const project_1_observations_expected = [\r",
							"    observation_1_1_attr,\r",
							"    observation_1_2_attr,\r",
							"    observation_1_3_attr,\r",
							"    observation_1_4_attr,\r",
							"    observation_1_5_attr,\r",
							"    observation_1_6_attr\r",
							"];\r",
							"pm.environment.set(\r",
							"    'project_1_observations_expected', \r",
							"    JSON.stringify(project_1_observations_expected)\r",
							");\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "b3b884e3-7270-4948-9c12-62d3981e69f4",
						"exec": [
							"const compareEntityPages = Function(\r",
							"    'pm',\r",
							"    'allEntitiesExpected',\r",
							"    'currentPage',\r",
							"    JSON.parse(pm.environment.get('compareEntityPages'))\r",
							");\r",
							"\r",
							"pm.test(\"200 status code\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"only correct number of observations in response\", function () {\r",
							"    const numObservationsExpected = 5;\r",
							"    const numObservationsReceived = pm.response.json().entities.length;\r",
							"    pm.expect(numObservationsReceived).to.equal(numObservationsExpected);\r",
							"});\r",
							"\r",
							"pm.test(\"next property exists\", function () {\r",
							"    const nextExists = Object.keys(pm.response.json()).includes(\"next\");\r",
							"    pm.expect(nextExists).to.be.true;\r",
							"});\r",
							"\r",
							"/* Get array of all entities received across all pages of results,\r",
							" * ensuring that all entities expected are included in it via test embedded\r",
							" * in function after last page of results received. */\r",
							"const allEntitiesExpected = JSON.parse(pm.environment.get('project_1_observations_expected'));\r",
							"const startingPage = pm.response.json();\r",
							"compareEntityPages(\r",
							"    pm,\r",
							"    allEntitiesExpected, \r",
							"    startingPage\r",
							");\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/projects/{{project_1_id}}/observations",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"projects",
						"{{project_1_id}}",
						"observations"
					]
				}
			},
			"response": []
		},
		{
			"name": "get all project_1 observations invalid cursor",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "9eeb4b98-996e-4ef3-b623-78ad4c858754",
						"exec": [
							"pm.test('403 status code', () => {\r",
							"    pm.response.to.have.status(403);\r",
							"});\r",
							"\r",
							"pm.test('correct error message', () => {\r",
							"    const messageExpected = \"The start cursor provided is not a valid Datastore cursor.\";\r",
							"    const messageReceived = pm.response.json().error;\r",
							"    pm.expect(messageReceived).to.equal(messageExpected);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/projects/{{project_1_id}}/observations?start=foobar",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"projects",
						"{{project_1_id}}",
						"observations"
					],
					"query": [
						{
							"key": "start",
							"value": "foobar"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "get all observations nonexistent project_id",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "eb86857b-fb39-44f8-8565-74a0c039b0e5",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "3421c004-8420-418e-bb55-a96cb432357e",
						"exec": [
							"pm.test('404 status code', () => {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test('correct error message', () => {\r",
							"    const messageExpected = \"The project with project_id cannot be found.\";\r",
							"    const messageReceived = pm.response.json().error;\r",
							"    pm.expect(messageReceived).to.equal(messageExpected);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/projects/{{nonexistent_entity_id}}/observations",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"projects",
						"{{nonexistent_entity_id}}",
						"observations"
					]
				}
			},
			"response": []
		},
		{
			"name": "get all observations bad format project_id",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "1180b162-d659-4eb5-98bd-833ca3f236fb",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "58c0ebbc-e9ad-49c1-93d9-67ffe8ba578b",
						"exec": [
							"pm.test('400 status code', () => {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test('correct error message', () => {\r",
							"    const messageExpected = \"All IDs must be positive integers.\";\r",
							"    const messageReceived = pm.response.json().error;\r",
							"    pm.expect(messageReceived).to.equal(messageExpected);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/projects/{{bad_format_entity_id}}/observations",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"projects",
						"{{bad_format_entity_id}}",
						"observations"
					]
				}
			},
			"response": []
		},
		{
			"name": "get all observations at root level",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "532176e4-7edb-4b89-95a8-d3733dd7b35a",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "f117e9cc-1d35-4e06-aba9-653d7ba4c4a2",
						"exec": [
							"pm.test(\"404 status code\", () => {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test('correct error message', () => {\r",
							"    const messageExpected = \"The collection you are seeking does not exist.\";\r",
							"    const messageReceived = pm.response.json().error;\r",
							"    pm.expect(messageReceived).to.equal(messageExpected);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/observations",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"observations"
					]
				}
			},
			"response": []
		},
		{
			"name": "upload observation_2_1 image",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "5d9f5896-81fa-4511-9c64-ec205e6590da",
						"exec": [
							"pm.test('201 status code', () => {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test('content is valid', () => {\r",
							"    const observation_2_1_image_url = pm.response.json().publicUrl;\r",
							"    pm.environment.set('observation_2_1_image_url', observation_2_1_image_url);\r",
							"    const storage_bucket_url = pm.environment.get('storage_bucket_url');\r",
							"    pm.expect(observation_2_1_image_url).to.contain(storage_bucket_url);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{teacher_1_password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{teacher_1_id}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "image",
							"type": "file",
							"src": "obs_2_1-geese_5.jpg"
						}
					],
					"options": {
						"formdata": {}
					}
				},
				"url": {
					"raw": "{{app_url}}/images",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"images"
					]
				}
			},
			"response": []
		},
		{
			"name": "create observation_2_1",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "9b17a898-6e11-456c-b7e6-33d8f9c28605",
						"exec": [
							"const observation_2_1_image_url = pm.environment.get('observation_2_1_image_url');\r",
							"const observation_2_1_attr = JSON.stringify({\r",
							"    \"date\": \"2020-12-12T12:12:12.12Z\",\r",
							"    \"data_image\": {\r",
							"        \"title\": \"Geese\",\r",
							"        \"url\": observation_2_1_image_url,\r",
							"        \"alt_text\": \"5 Canadian Geese Flying\"\r",
							"    },\r",
							"    \"data_number\":{\r",
							"        \"description\": \"Geese\",\r",
							"        \"quantity\": 5\r",
							"    },\r",
							"    \"data_description\": \"I saw these geese flying over my house!\"\r",
							"});\r",
							"pm.environment.set('observation_2_1_attr', observation_2_1_attr);\r",
							"\r",
							"/* Get project_2 data before POST. */\r",
							"const app_url = pm.environment.get('app_url');\r",
							"const project_2_id = pm.environment.get('project_2_id');\r",
							"pm.sendRequest(`${app_url}/projects/${project_2_id}`, function(err, res) {\r",
							"    pm.environment.set('preRequestCode', res.code);\r",
							"    pm.environment.set('preRequestDataNumber', res.json().data_number.number);\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "c0459ff8-2a67-4591-82ca-83c2fe6cd043",
						"exec": [
							"pm.test(\"201 status code\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"/* Get constants utilized in next couple tests. */\r",
							"const app_url = pm.environment.get('app_url');\r",
							"const project_2_id = pm.environment.get('project_2_id');\r",
							"\r",
							"pm.test(\"content is valid\", function () {\r",
							"   /* Save the id to an environment variable and verify that it is a string. */\r",
							"   let id = pm.response.json().id;\r",
							"   pm.environment.set('observation_2_1_id', id);\r",
							"   pm.expect(id).to.be.a('string');\r",
							"\r",
							"   /* Verify that the 'self' url matches what is expected based on the id. */\r",
							"   let selfUrlExpected = `${app_url}/projects/${project_2_id}/observations/${id}`;\r",
							"   let selfUrlReceived = pm.response.json().self;\r",
							"   pm.expect(selfUrlReceived).to.equal(selfUrlExpected);\r",
							"});\r",
							"\r",
							"/* Ensure that project_2's data_number.number value has increased by 5. */\r",
							"pm.sendRequest(`${app_url}/projects/${project_2_id}`, function(err, res) {\r",
							"    pm.test('GET project before POST 200 status code', () => {\r",
							"        const preRequestCode = pm.environment.get('preRequestCode');\r",
							"        pm.environment.unset('preRequestCode');\r",
							"        pm.expect(preRequestCode).to.equal(200);\r",
							"    });\r",
							"    \r",
							"    pm.test('GET project after POST 200 status code', () => {\r",
							"        pm.expect(res.code).to.equal(200);\r",
							"    });\r",
							"    \r",
							"    pm.test(\r",
							"        'project_2 data_number.number value correct after observation posted', \r",
							"    () => {\r",
							"        const preRequestDataNumber = pm.environment.get('preRequestDataNumber');\r",
							"        pm.environment.unset('preRequestDataNumber');\r",
							"\r",
							"        const numberExpected = preRequestDataNumber + 5;\r",
							"        const numberReceived = res.json().data_number.number;\r",
							"        pm.expect(numberReceived).to.equal(numberExpected);\r",
							"    });\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{teacher_1_password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{teacher_1_id}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{{observation_2_1_attr}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/projects/{{project_2_id}}/observations",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"projects",
						"{{project_2_id}}",
						"observations"
					]
				}
			},
			"response": []
		},
		{
			"name": "upload observation_2_2 image",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "eb35c2f0-f17a-4318-b5b3-1394735412ad",
						"exec": [
							"pm.test('201 status code', () => {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test('content is valid', () => {\r",
							"    const observation_2_2_image_url = pm.response.json().publicUrl;\r",
							"    pm.environment.set('observation_2_2_image_url', observation_2_2_image_url);\r",
							"    const storage_bucket_url = pm.environment.get('storage_bucket_url');\r",
							"    pm.expect(observation_2_2_image_url).to.contain(storage_bucket_url);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{teacher_1_password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{teacher_1_id}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "image",
							"type": "file",
							"src": "obs_2_2-geese_4.jpg"
						}
					],
					"options": {
						"formdata": {}
					}
				},
				"url": {
					"raw": "{{app_url}}/images",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"images"
					]
				}
			},
			"response": []
		},
		{
			"name": "create observation_2_2",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "78937052-6599-4a22-ac1f-0c5c3ac5a929",
						"exec": [
							"const observation_2_2_image_url = pm.environment.get('observation_2_2_image_url');\r",
							"const observation_2_2_attr = JSON.stringify({\r",
							"    \"date\": \"2021-10-10T10:10:10.10Z\",\r",
							"    \"data_image\": {\r",
							"        \"title\": \"Geese\",\r",
							"        \"url\": observation_2_2_image_url,\r",
							"        \"alt_text\": \"4 Canadian Geese Flying\"\r",
							"    },\r",
							"    \"data_number\":{\r",
							"        \"description\": \"Migrating Birds\",\r",
							"        \"quantity\": 4\r",
							"    },\r",
							"    \"data_description\": \"I saw these geese flying while walking through a field.\"\r",
							"});\r",
							"pm.environment.set('observation_2_2_attr', observation_2_2_attr);\r",
							"\r",
							"/* Get project_2 data before POST. */\r",
							"const app_url = pm.environment.get('app_url');\r",
							"const project_2_id = pm.environment.get('project_2_id');\r",
							"pm.sendRequest(`${app_url}/projects/${project_2_id}`, function(err, res) {\r",
							"    pm.environment.set('preRequestCode', res.code);\r",
							"    pm.environment.set('preRequestDataNumber', res.json().data_number.number);\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "e22144e6-7a7a-4272-8189-98befeff0f99",
						"exec": [
							"pm.test(\"201 status code\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"/* Get constants utilized in next couple tests. */\r",
							"const app_url = pm.environment.get('app_url');\r",
							"const project_2_id = pm.environment.get('project_2_id');\r",
							"\r",
							"pm.test(\"content is valid\", function () {\r",
							"   /* Save the id to an environment variable and verify that it is a string. */\r",
							"   let id = pm.response.json().id;\r",
							"   pm.environment.set('observation_2_2_id', id);\r",
							"   pm.expect(id).to.be.a('string');\r",
							"\r",
							"   /* Verify that the 'self' url matches what is expected based on the id. */\r",
							"   let selfUrlExpected = `${app_url}/projects/${project_2_id}/observations/${id}`;\r",
							"   let selfUrlReceived = pm.response.json().self;\r",
							"   pm.expect(selfUrlReceived).to.equal(selfUrlExpected);\r",
							"});\r",
							"\r",
							"/* Ensure that project_2's data_number.number value has increased by 4. */\r",
							"pm.sendRequest(`${app_url}/projects/${project_2_id}`, function(err, res) {\r",
							"    pm.test('GET project before POST 200 status code', () => {\r",
							"        const preRequestCode = pm.environment.get('preRequestCode');\r",
							"        pm.environment.unset('preRequestCode');\r",
							"        pm.expect(preRequestCode).to.equal(200);\r",
							"    });\r",
							"    \r",
							"    pm.test('GET project after POST 200 status code', () => {\r",
							"        pm.expect(res.code).to.equal(200);\r",
							"    });\r",
							"    \r",
							"    pm.test(\r",
							"        'project_2 data_number.number value correct after observation posted', \r",
							"    () => {\r",
							"        const preRequestDataNumber = pm.environment.get('preRequestDataNumber');\r",
							"        pm.environment.unset('preRequestDataNumber');\r",
							"\r",
							"        const numberExpected = preRequestDataNumber + 4;\r",
							"        const numberReceived = res.json().data_number.number;\r",
							"        pm.expect(numberReceived).to.equal(numberExpected);\r",
							"    });\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{teacher_1_password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{teacher_1_id}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{{observation_2_2_attr}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/projects/{{project_2_id}}/observations",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"projects",
						"{{project_2_id}}",
						"observations"
					]
				}
			},
			"response": []
		},
		{
			"name": "update teacher_1 no image url",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "5b9ae733-f5d9-43b4-8241-b80f1c2c5f32",
						"exec": [
							"pm.test('200 status code', () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "username",
							"value": "{{teacher_1_id}}",
							"type": "string"
						},
						{
							"key": "password",
							"value": "{{teacher_1_password}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"school\": \"Supernova Primary School\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/teachers/{{teacher_1_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"teachers",
						"{{teacher_1_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "update teacher_1 password (current password known)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "b1fbd6ba-71af-4a02-ae6d-067ecf4ec25b",
						"exec": [
							"pm.test('204 status code', () => {\r",
							"    pm.response.to.have.status(204);\r",
							"});\r",
							"\r",
							"/* Update teacher_1_password. */\r",
							"const teacher_1_credential_patches = JSON.parse(\r",
							"    pm.environment.get(\"teacher_1_credential_patches\")\r",
							");\r",
							"pm.environment.set(\"teacher_1_password\", teacher_1_credential_patches.password);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "0aba3291-68c4-4300-9a75-65452e05d7be",
						"exec": [
							"const teacher_1_credential_patches = JSON.stringify({\r",
							"    \"password\": \"Manhattan\"\r",
							"});\r",
							"pm.environment.set(\"teacher_1_credential_patches\", teacher_1_credential_patches);\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{teacher_1_password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{teacher_1_id}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{{teacher_1_credential_patches}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/teachers/{{teacher_1_id}}/credentials",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"teachers",
						"{{teacher_1_id}}",
						"credentials"
					]
				}
			},
			"response": []
		},
		{
			"name": "update teacher_1 secret_questions",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "b1fbd6ba-71af-4a02-ae6d-067ecf4ec25b",
						"exec": [
							"pm.test('204 status code', () => {\r",
							"    pm.response.to.have.status(204);\r",
							"});\r",
							"\r",
							"/* Update teacher_1_password. */\r",
							"const teacher_1_credential_patches = JSON.parse(\r",
							"    pm.environment.get(\"teacher_1_credential_patches\")\r",
							");\r",
							"pm.environment.set(\r",
							"    \"teacher_1_updated_secret_questions\", \r",
							"    JSON.stringify(teacher_1_credential_patches.secret_questions)\r",
							");"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "0aba3291-68c4-4300-9a75-65452e05d7be",
						"exec": [
							"const teacher_1_credential_patches = JSON.stringify({\r",
							"    \"secret_questions\": {\r",
							"        \"question_1\": \"What does the dog say?\",\r",
							"        \"answer_1\": \"Bow-wow-wow!\",\r",
							"        \"question_2\": \"What is a danger of nuclear energy?\",\r",
							"        \"answer_2\": \"radioactivity\"\r",
							"    }\r",
							"});\r",
							"pm.environment.set(\"teacher_1_credential_patches\", teacher_1_credential_patches);\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{teacher_1_password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{teacher_1_id}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{{teacher_1_credential_patches}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/teachers/{{teacher_1_id}}/credentials",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"teachers",
						"{{teacher_1_id}}",
						"credentials"
					]
				}
			},
			"response": []
		},
		{
			"name": "get teacher_1 reset_questions and reset_code",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "b1fbd6ba-71af-4a02-ae6d-067ecf4ec25b",
						"exec": [
							"pm.test('200 status code', () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"/* Save reset_code to environment variable. */\r",
							"const reset_code = pm.response.json().reset_code;\r",
							"pm.environment.set('teacher_1_reset_code', reset_code);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "0aba3291-68c4-4300-9a75-65452e05d7be",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/teachers/{{teacher_1_id}}/credentials",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"teachers",
						"{{teacher_1_id}}",
						"credentials"
					]
				}
			},
			"response": []
		},
		{
			"name": "reset teacher_1 unknown password",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "b1fbd6ba-71af-4a02-ae6d-067ecf4ec25b",
						"exec": [
							"pm.test('204 status code', () => {\r",
							"    pm.response.to.have.status(204);\r",
							"});\r",
							"\r",
							"const teacher_1_password_reset = JSON.parse(\r",
							"    pm.environment.get('teacher_1_password_reset')\r",
							");\r",
							"pm.environment.set('teacher_1_password', teacher_1_password_reset.password);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "0aba3291-68c4-4300-9a75-65452e05d7be",
						"exec": [
							"const teacher_1_secret_questions = JSON.parse(\r",
							"    pm.environment.get('teacher_1_updated_secret_questions')\r",
							");\r",
							"const teacher_1_password_reset = JSON.stringify({\r",
							"    \"password\": \"EEqualsMC2\",\r",
							"    \"secret_questions\": teacher_1_secret_questions\r",
							"});\r",
							"pm.environment.set('teacher_1_password_reset', teacher_1_password_reset);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{teacher_1_reset_code}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{teacher_1_id}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{{teacher_1_password_reset}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/teachers/{{teacher_1_id}}/credentials",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"teachers",
						"{{teacher_1_id}}",
						"credentials"
					]
				}
			},
			"response": []
		},
		{
			"name": "update project_1 same image url",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "4b427099-b741-4083-a464-d329a9369413",
						"exec": [
							"const project_1_image_url = pm.environment.get('project_1_image_url');\r",
							"const project_1_patches = {\r",
							"    \"name\": \"Let's look at birds!\",\r",
							"    \"description_image\": {\r",
							"        \"title\": \"Seagulls\",\r",
							"        \"url\": project_1_image_url,\r",
							"        \"alt_text\": \"5 seagulls flying over water\"\r",
							"    }\r",
							"};\r",
							"pm.environment.set('project_1_patches', JSON.stringify(project_1_patches));"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "df2d4c0d-7df0-4240-9e7b-921b30b56b7d",
						"exec": [
							"const compareEntities = Function(\r",
							"    'entityReceived',\r",
							"    'entityExpected',\r",
							"    JSON.parse(pm.environment.get('compareEntities'))\r",
							");\r",
							"\r",
							"pm.test(\"PATCH response has 200 status code\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"const selfUrlReceived = pm.response.json().self;\r",
							"pm.test(\"PATCH response content is valid\", function () {\r",
							"   /* Verify that the id is a string. */\r",
							"   let id = pm.response.json().id;\r",
							"   pm.expect(id).to.be.a('string');\r",
							"\r",
							"   /* Verify that the 'self' url matches what is expected based on the id. */\r",
							"   let selfUrlExpected = pm.environment.get('app_url') + '/projects/' + id;\r",
							"   pm.expect(selfUrlReceived).to.equal(selfUrlExpected);\r",
							"});\r",
							"\r",
							"/* Issue a GET request to make sure the patches in project_1_patches \r",
							" * have gone through and all other fields remain unchanged. */\r",
							"pm.sendRequest(selfUrlReceived, function(err, res) {\r",
							"    pm.test('GET of entity after PATCH has 200 status code', () => {\r",
							"        pm.expect(res.code).to.equal(200);\r",
							"    });\r",
							"\r",
							"    pm.test('entity has expected content after patches are made', () => {\r",
							"        const project_1_patches = JSON.parse(\r",
							"            pm.environment.get('project_1_patches')\r",
							"        );\r",
							"\r",
							"        /* Retrieve expected attributes of project_1 before update from\r",
							"         * projects_expected array (in which projects 1-6 appear\r",
							"         * in sequential order) */\r",
							"        const projects_expected = JSON.parse(\r",
							"            pm.environment.get('projects_expected')\r",
							"        );\r",
							"        const attr_expected = projects_expected[0];\r",
							"\r",
							"        /* Update attr_expected with all expected patches. */\r",
							"        const patch_keys = Object.keys(project_1_patches);\r",
							"        for (const key of patch_keys) {\r",
							"            attr_expected[key] = project_1_patches[key];\r",
							"        }\r",
							"\r",
							"        /* Save updates to projects_expected environment variable \r",
							"         * for later reference. */\r",
							"        projects_expected[0] = attr_expected;\r",
							"        pm.environment.set('projects_expected', JSON.stringify(projects_expected));\r",
							"\r",
							"        /* Compare the attributes received to those expected to ensure they match. */\r",
							"        const attr_received = res.json();\r",
							"        const updated_correctly = compareEntities(attr_received, attr_expected);\r",
							"        pm.expect(updated_correctly).to.be.true;\r",
							"    });\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "username",
							"value": "{{teacher_1_id}}",
							"type": "string"
						},
						{
							"key": "password",
							"value": "{{teacher_1_password}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{{project_1_patches}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/projects/{{project_1_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"projects",
						"{{project_1_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "update project_1 no image url",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "8305dfd7-832c-4182-8380-baeaea16e902",
						"exec": [
							"const project_1_image_url = pm.environment.get('project_1_image_url');\r",
							"const project_1_patches = {\r",
							"    \"description_text\": \"Students will take pictures of birds throughout Corvallis, OR and identify the species type. Whenever a student reports a species type not already included in observations, the count of species found will be increased. The goal is to have students find at least 25 different species.\"\r",
							"};\r",
							"pm.environment.set('project_1_patches', JSON.stringify(project_1_patches));"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "a78f7950-650e-4074-8f5d-8461668d2152",
						"exec": [
							"const compareEntities = Function(\r",
							"    'entityReceived',\r",
							"    'entityExpected',\r",
							"    JSON.parse(pm.environment.get('compareEntities'))\r",
							");\r",
							"\r",
							"pm.test(\"PATCH response has 200 status code\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"const selfUrlReceived = pm.response.json().self;\r",
							"pm.test(\"PATCH response content is valid\", function () {\r",
							"   /* Verify that the id is a string. */\r",
							"   let id = pm.response.json().id;\r",
							"   pm.expect(id).to.be.a('string');\r",
							"\r",
							"   /* Verify that the 'self' url matches what is expected based on the id. */\r",
							"   let selfUrlExpected = pm.environment.get('app_url') + '/projects/' + id;\r",
							"   pm.expect(selfUrlReceived).to.equal(selfUrlExpected);\r",
							"});\r",
							"\r",
							"/* Issue a GET request to make sure the patches in project_1_patches \r",
							" * have gone through and all other fields remain unchanged. */\r",
							"pm.sendRequest(selfUrlReceived, function(err, res) {\r",
							"    pm.test('GET of entity after PATCH has 200 status code', () => {\r",
							"        pm.expect(res.code).to.equal(200);\r",
							"    });\r",
							"\r",
							"    pm.test('entity has expected content after patches are made', () => {\r",
							"        const project_1_patches = JSON.parse(\r",
							"            pm.environment.get('project_1_patches')\r",
							"        );\r",
							"\r",
							"        /* Retrieve expected attributes of project_1 before update from\r",
							"         * projects_expected array (in which projects 1-6 appear\r",
							"         * in sequential order) */\r",
							"        const projects_expected = JSON.parse(\r",
							"            pm.environment.get('projects_expected')\r",
							"        );\r",
							"        const attr_expected = projects_expected[0];\r",
							"\r",
							"        /* Update attr_expected with all expected patches. */\r",
							"        const patch_keys = Object.keys(project_1_patches);\r",
							"        for (const key of patch_keys) {\r",
							"            attr_expected[key] = project_1_patches[key];\r",
							"        }\r",
							"\r",
							"        /* Save updates to projects_expected environment variable \r",
							"         * for later reference. */\r",
							"        projects_expected[0] = attr_expected;\r",
							"        pm.environment.set('projects_expected', JSON.stringify(projects_expected));\r",
							"\r",
							"        /* Compare the attributes received to those expected to ensure they match. */\r",
							"        const attr_received = res.json();\r",
							"        const updated_correctly = compareEntities(attr_received, attr_expected);\r",
							"        pm.expect(updated_correctly).to.be.true;\r",
							"    });\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{teacher_1_password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{teacher_1_id}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{{project_1_patches}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/projects/{{project_1_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"projects",
						"{{project_1_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "upload new image for project_1",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "faf0ce84-9322-4dd0-b764-06f0a9e6b5c9",
						"exec": [
							"pm.test('201 status code', () => {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test('content is valid', () => {\r",
							"    const project_1_updated_image_url = pm.response.json().publicUrl;\r",
							"    pm.environment.set('project_1_updated_image_url', project_1_updated_image_url);\r",
							"    const storage_bucket_url = pm.environment.get('storage_bucket_url');\r",
							"    pm.expect(project_1_updated_image_url).to.contain(storage_bucket_url);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{teacher_1_password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{teacher_1_id}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "image",
							"type": "file",
							"src": "proj1_seagull_update.jpg"
						}
					],
					"options": {
						"formdata": {}
					}
				},
				"url": {
					"raw": "{{app_url}}/images",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"images"
					]
				}
			},
			"response": []
		},
		{
			"name": "update project_1 new image url",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "85dba6c6-1b7c-46ad-82ac-08d995fd316a",
						"exec": [
							"const project_1_updated_image_url = pm.environment.get('project_1_updated_image_url');\r",
							"const project_1_patches = {\r",
							"    \"name\": \"Let's look at birds!\",\r",
							"    \"description_image\": {\r",
							"        \"title\": \"Seagull\",\r",
							"        \"url\": project_1_updated_image_url,\r",
							"        \"alt_text\": \"Close-up image looking upward at a segull in flight with its wings spread.\"\r",
							"    }\r",
							"};\r",
							"pm.environment.set('project_1_patches', JSON.stringify(project_1_patches));"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "b6f398c0-74ef-4ff4-8cd4-08096feb26f6",
						"exec": [
							"const compareEntities = Function(\r",
							"    'entityReceived',\r",
							"    'entityExpected',\r",
							"    JSON.parse(pm.environment.get('compareEntities'))\r",
							");\r",
							"\r",
							"pm.test(\"PATCH response has 200 status code\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"const selfUrlReceived = pm.response.json().self;\r",
							"pm.test(\"PATCH response content is valid\", function () {\r",
							"   /* Verify that the id is a string. */\r",
							"   let id = pm.response.json().id;\r",
							"   pm.expect(id).to.be.a('string');\r",
							"\r",
							"   /* Verify that the 'self' url matches what is expected based on the id. */\r",
							"   let selfUrlExpected = pm.environment.get('app_url') + '/projects/' + id;\r",
							"   pm.expect(selfUrlReceived).to.equal(selfUrlExpected);\r",
							"});\r",
							"\r",
							"/* Issue a GET request to make sure the patches in project_1_patches \r",
							" * have gone through and all other fields remain unchanged. */\r",
							"pm.sendRequest(selfUrlReceived, function(err, res) {\r",
							"    pm.test('GET of entity after PATCH has 200 status code', () => {\r",
							"        pm.expect(res.code).to.equal(200);\r",
							"    });\r",
							"\r",
							"    pm.test('entity has expected content after patches are made', () => {\r",
							"        const project_1_patches = JSON.parse(\r",
							"            pm.environment.get('project_1_patches')\r",
							"        );\r",
							"\r",
							"        /* Retrieve expected attributes of project_1 before update from\r",
							"         * projects_expected array (in which projects 1-6 appear\r",
							"         * in sequential order) */\r",
							"        const projects_expected = JSON.parse(\r",
							"            pm.environment.get('projects_expected')\r",
							"        );\r",
							"        const attr_expected = projects_expected[0];\r",
							"\r",
							"        /* Update attr_expected with all expected patches. */\r",
							"        const patch_keys = Object.keys(project_1_patches);\r",
							"        for (const key of patch_keys) {\r",
							"            attr_expected[key] = project_1_patches[key];\r",
							"        }\r",
							"\r",
							"        /* Save updates to projects_expected environment variable \r",
							"         * for later reference. */\r",
							"        projects_expected[0] = attr_expected;\r",
							"        pm.environment.set('projects_expected', JSON.stringify(projects_expected));\r",
							"\r",
							"        /* Compare the attributes received to those expected to ensure they match. */\r",
							"        const attr_received = res.json();\r",
							"        const updated_correctly = compareEntities(attr_received, attr_expected);\r",
							"        pm.expect(updated_correctly).to.be.true;\r",
							"    });\r",
							"\r",
							"    pm.environment.unset('project_1_image_url');\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "username",
							"value": "{{teacher_1_id}}",
							"type": "string"
						},
						{
							"key": "password",
							"value": "{{teacher_1_password}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{{project_1_patches}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/projects/{{project_1_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"projects",
						"{{project_1_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "update project_1 non-updatable property",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4c9b12f7-3c18-4568-83e6-7288cd62ded5",
						"exec": [
							"pm.test('400 status code', () => {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test('correct error message', () => {\r",
							"    const messageExpected = \"No valid parameter was included or at least 1 parameter was invalid.\";\r",
							"    const messageReceived = pm.response.json().error;\r",
							"    pm.expect(messageReceived).to.equal(messageExpected);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{teacher_1_password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{teacher_1_id}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"teacher_id\": \"456\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/projects/{{project_1_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"projects",
						"{{project_1_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "update project_1 incorrect variable type",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "2d811b6f-4f76-42de-a2af-9a3f5f271b47",
						"exec": [
							"pm.test('400 status code', () => {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test('correct error message', () => {\r",
							"    const messageExpected = \"No valid parameter was included or at least 1 parameter was invalid.\";\r",
							"    const messageReceived = pm.response.json().error;\r",
							"    pm.expect(messageReceived).to.equal(messageExpected);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{teacher_1_password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{teacher_1_id}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": 42,\r\n    \"description_image\": {\r\n        \"title\": \"Seagulls\",\r\n        \"url\": \"https://pixabay.com/images/id-4026280/\",\r\n        \"alt_text\": \"5 seagulls flying over water\"\r\n    }\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/projects/{{project_1_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"projects",
						"{{project_1_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "update observation_1_1 incorrect variable type",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "65b7f4c7-465f-4b14-a1c9-10f3d95dd848",
						"exec": [
							"pm.test('400 status code', () => {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test('correct error message', () => {\r",
							"    const messageExpected = \"No valid parameter was included or at least 1 parameter was invalid.\";\r",
							"    const messageReceived = pm.response.json().error;\r",
							"    pm.expect(messageReceived).to.equal(messageExpected);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{teacher_1_password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{teacher_1_id}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"date\": 42\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/projects/{{project_1_id}}/observations/{{observation_1_1_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"projects",
						"{{project_1_id}}",
						"observations",
						"{{observation_1_1_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "update project_1 extraneous property",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "9114b954-c8ca-4390-b387-40633815c9b1",
						"exec": [
							"pm.test('400 status code', () => {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test('correct error message', () => {\r",
							"    const messageExpected = \"No valid parameter was included or at least 1 parameter was invalid.\";\r",
							"    const messageReceived = pm.response.json().error;\r",
							"    pm.expect(messageReceived).to.equal(messageExpected);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{teacher_1_password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{teacher_1_id}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Let's look at birds!\",\r\n    \"description_image\": {\r\n        \"title\": \"Seagulls\",\r\n        \"url\": \"https://pixabay.com/images/id-4026280/\",\r\n        \"alt_text\": \"5 seagulls flying over water\"\r\n    },\r\n    \"foo\": \"bar\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/projects/{{project_1_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"projects",
						"{{project_1_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "update observation_1_1 extraneous property",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "eec36109-23d0-4a43-9d26-85f681389e85",
						"exec": [
							"pm.test('400 status code', () => {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test('correct error message', () => {\r",
							"    const messageExpected = \"No valid parameter was included or at least 1 parameter was invalid.\";\r",
							"    const messageReceived = pm.response.json().error;\r",
							"    pm.expect(messageReceived).to.equal(messageExpected);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{teacher_1_password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{teacher_1_id}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"date\": \"2020-10-01T08:01:00.5Z\",\r\n    \"data_number\": {\r\n        \"description\": \"American Goldfinch\",\r\n        \"quantity\": 1\r\n    },\r\n    \"data_description\": \"I found this American Goldfinch on a walk with my family!\",\r\n    \"foo\": \"bar\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/projects/{{project_1_id}}/observations/{{observation_1_1_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"projects",
						"{{project_1_id}}",
						"observations",
						"{{observation_1_1_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "update project_1 extraneous subproperty",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "8dcb250d-23d7-4d8f-b1e8-d5599a492479",
						"exec": [
							"pm.test('400 status code', () => {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test('correct error message', () => {\r",
							"    const messageExpected = \"No valid parameter was included or at least 1 parameter was invalid.\";\r",
							"    const messageReceived = pm.response.json().error;\r",
							"    pm.expect(messageReceived).to.equal(messageExpected);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{teacher_1_password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{teacher_1_id}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Let's look at birds!\",\r\n    \"description_image\": {\r\n        \"title\": \"Seagulls\",\r\n        \"url\": \"https://pixabay.com/images/id-4026280/\",\r\n        \"alt_text\": \"5 seagulls flying over water\",\r\n        \"foo\": \"bar\"\r\n    }\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/projects/{{project_1_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"projects",
						"{{project_1_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "update observation_1_1 extraneous subproperty",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "69307eaf-7695-42d7-9145-b5eb775af298",
						"exec": [
							"pm.test('400 status code', () => {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test('correct error message', () => {\r",
							"    const messageExpected = \"No valid parameter was included or at least 1 parameter was invalid.\";\r",
							"    const messageReceived = pm.response.json().error;\r",
							"    pm.expect(messageReceived).to.equal(messageExpected);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{teacher_1_password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{teacher_1_id}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"data_number\": {\r\n        \"description\": \"American Goldfinch\",\r\n        \"quantity\": 1,\r\n        \"foo\": \"bar\"\r\n    },\r\n    \"data_description\": \"I found this American Goldfinch on a walk with my family!\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/projects/{{project_1_id}}/observations/{{observation_1_1_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"projects",
						"{{project_1_id}}",
						"observations",
						"{{observation_1_1_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "update project_1 empty string property",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "9152f8e9-fc30-4153-9028-1a98793e4bbb",
						"exec": [
							"pm.test('400 status code', () => {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test('correct error message', () => {\r",
							"    const messageExpected = \"No valid parameter was included or at least 1 parameter was invalid.\";\r",
							"    const messageReceived = pm.response.json().error;\r",
							"    pm.expect(messageReceived).to.equal(messageExpected);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{teacher_1_password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{teacher_1_id}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"\",\r\n    \"description_image\": {\r\n        \"title\": \"Seagulls\",\r\n        \"url\": \"https://pixabay.com/images/id-4026280/\",\r\n        \"alt_text\": \"5 seagulls flying over water\"\r\n    }\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/projects/{{project_1_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"projects",
						"{{project_1_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "update observation_1_1 empty string property",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "e88d3158-eff2-4694-9877-ea5407b7a637",
						"exec": [
							"pm.test('400 status code', () => {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test('correct error message', () => {\r",
							"    const messageExpected = \"No valid parameter was included or at least 1 parameter was invalid.\";\r",
							"    const messageReceived = pm.response.json().error;\r",
							"    pm.expect(messageReceived).to.equal(messageExpected);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{teacher_1_password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{teacher_1_id}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"date\": \"\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/projects/{{project_1_id}}/observations/{{observation_1_1_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"projects",
						"{{project_1_id}}",
						"observations",
						"{{observation_1_1_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "update project_1 empty string subproperty",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "fa060528-4a67-4077-9b21-81eb51fc372f",
						"exec": [
							"pm.test('400 status code', () => {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test('correct error message', () => {\r",
							"    const messageExpected = \"No valid parameter was included or at least 1 parameter was invalid.\";\r",
							"    const messageReceived = pm.response.json().error;\r",
							"    pm.expect(messageReceived).to.equal(messageExpected);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{teacher_1_password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{teacher_1_id}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Let's look at birds!\",\r\n    \"description_image\": {\r\n        \"title\": \"\",\r\n        \"url\": \"https://pixabay.com/images/id-4026280/\",\r\n        \"alt_text\": \"5 seagulls flying over water\"\r\n    }\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/projects/{{project_1_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"projects",
						"{{project_1_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "update observation_1_1 empty string subproperty",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "15205832-c72a-4d2e-8bcb-d682e47e47d8",
						"exec": [
							"pm.test('400 status code', () => {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test('correct error message', () => {\r",
							"    const messageExpected = \"No valid parameter was included or at least 1 parameter was invalid.\";\r",
							"    const messageReceived = pm.response.json().error;\r",
							"    pm.expect(messageReceived).to.equal(messageExpected);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{teacher_1_password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{teacher_1_id}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"date\": \"2020-10-01T08:01:00.5Z\",\r\n    \"data_image\": {\r\n        \"title\": \"\",\r\n        \"url\": \"{{observation_1_1_image_url}}\",\r\n        \"alt_text\": \"An American Goldfinch.\"\r\n    }\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/projects/{{project_1_id}}/observations/{{observation_1_1_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"projects",
						"{{project_1_id}}",
						"observations",
						"{{observation_1_1_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "update project_1 no properties in request body",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "1057b1ce-aa57-437d-919a-f125dc79c8d5",
						"exec": [
							"pm.test('400 status code', () => {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test('correct error message', () => {\r",
							"    const messageExpected = \"No valid parameter was included or at least 1 parameter was invalid.\";\r",
							"    const messageReceived = pm.response.json().error;\r",
							"    pm.expect(messageReceived).to.equal(messageExpected);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{teacher_1_password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{teacher_1_id}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/projects/{{project_1_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"projects",
						"{{project_1_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "update observation_1_1 no properties in request body",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "0aff5d61-7673-4013-a530-7273010a876c",
						"exec": [
							"pm.test('400 status code', () => {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test('correct error message', () => {\r",
							"    const messageExpected = \"No valid parameter was included or at least 1 parameter was invalid.\";\r",
							"    const messageReceived = pm.response.json().error;\r",
							"    pm.expect(messageReceived).to.equal(messageExpected);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{teacher_1_password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{teacher_1_id}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/projects/{{project_1_id}}/observations/{{observation_1_1_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"projects",
						"{{project_1_id}}",
						"observations",
						"{{observation_1_1_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "update project_1 missing property from embedded JSON object",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "e7b46046-d71f-41bd-ad37-25e11a3bccfe",
						"exec": [
							"pm.test('400 status code', () => {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test('correct error message', () => {\r",
							"    const messageExpected = \"No valid parameter was included or at least 1 parameter was invalid.\";\r",
							"    const messageReceived = pm.response.json().error;\r",
							"    pm.expect(messageReceived).to.equal(messageExpected);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{teacher_1_password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{teacher_1_id}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Let's look at birds!\",\r\n    \"description_image\": {\r\n        \"title\": \"Seagulls\",\r\n        \"url\": \"https://pixabay.com/images/id-4026280/\"\r\n    }\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/projects/{{project_1_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"projects",
						"{{project_1_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "update observation_1_1 missing property from embedded JSON object",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "527e541d-05fd-4b94-adc5-64c795f58c05",
						"exec": [
							"pm.test('400 status code', () => {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test('correct error message', () => {\r",
							"    const messageExpected = \"No valid parameter was included or at least 1 parameter was invalid.\";\r",
							"    const messageReceived = pm.response.json().error;\r",
							"    pm.expect(messageReceived).to.equal(messageExpected);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{teacher_1_password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{teacher_1_id}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"data_number\": {\r\n        \"quantity\": 1\r\n    },\r\n    \"data_description\": \"I found this American Goldfinch on a walk with my family!\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/projects/{{project_1_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"projects",
						"{{project_1_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "update project_1 bad format image url",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "c6c3befa-ae11-4b13-949e-7962e0aa2f04",
						"exec": [
							"pm.test('400 status code', () => {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test('correct error message', () => {\r",
							"    const messageExpected = 'The image URL provided is improperly formatted, the image does not exist, or the image is not in an acceptable format';\r",
							"    const messageReceived = pm.response.json().error;\r",
							"    pm.expect(messageReceived).to.equal(messageExpected);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{teacher_1_password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{teacher_1_id}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"description_image\": {\r\n        \"title\": \"Seagulls\",\r\n        \"url\": \"https://bogus_image_site.net\",\r\n        \"alt_text\": \"3 seagulls flying over water\"\r\n    }\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/projects/{{project_1_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"projects",
						"{{project_1_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "update observation_1_1 bad format image url",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "e05eff06-45bf-4bd1-820b-281536d9a473",
						"exec": [
							"pm.test('400 status code', () => {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test('correct error message', () => {\r",
							"    const messageExpected = 'The image URL provided is improperly formatted, the image does not exist, or the image is not in an acceptable format';\r",
							"    const messageReceived = pm.response.json().error;\r",
							"    pm.expect(messageReceived).to.equal(messageExpected);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{teacher_1_password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{teacher_1_id}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"date\": \"2020-10-01T08:01:00.5Z\",\r\n    \"data_image\": {\r\n        \"title\": \"American Goldfinch\",\r\n        \"url\": \"http://bogusimagesite.com\",\r\n        \"alt_text\": \"An American Goldfinch.\"\r\n    },\r\n    \"data_description\": \"I found this American Goldfinch on a walk with my family!\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/projects/{{project_1_id}}/observations/{{observation_1_1_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"projects",
						"{{project_1_id}}",
						"observations",
						"{{observation_1_1_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "update project_1 image does not exist",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "ad2dae61-b8a1-4f8a-9533-beb609f9c974",
						"exec": [
							"pm.test('400 status code', () => {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test('correct error message', () => {\r",
							"    const messageExpected = 'The image URL provided is improperly formatted, the image does not exist, or the image is not in an acceptable format';\r",
							"    const messageReceived = pm.response.json().error;\r",
							"    pm.expect(messageReceived).to.equal(messageExpected);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{teacher_1_password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{teacher_1_id}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"description_image\": {\r\n        \"title\": \"Seagulls\",\r\n        \"url\": \"https://storage.googleapis.com/kidizen-science-images/foo\",\r\n        \"alt_text\": \"3 seagulls flying over water\"\r\n    }\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/projects/{{project_1_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"projects",
						"{{project_1_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "update project_1 unsupported media type",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "3e1a273a-9f4c-48b0-8e07-37951b513965",
						"exec": [
							"pm.test('415 status code', () => {\r",
							"    pm.response.to.have.status(415);\r",
							"});\r",
							"\r",
							"pm.test('correct error message', () => {\r",
							"    const messageExpected = 'This endpoint only accepts content of type application/json';\r",
							"    const messageReceived = pm.response.json().error;\r",
							"    pm.expect(messageReceived).to.equal(messageExpected);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{teacher_1_password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{teacher_1_id}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "<ul>\r\n    <li>Name: Let's look at birds!</li>\r\n</ul>",
					"options": {
						"raw": {
							"language": "html"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/projects/{{project_1_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"projects",
						"{{project_1_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "update project with nonexistent id",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "7236a1c0-0d99-4e61-9432-74b0830e6dce",
						"exec": [
							"pm.test('404 status code', () => {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test('correct error message', () => {\r",
							"    const messageExpected = \"The item you requested could not be found.\";\r",
							"    const messageReceived = pm.response.json().error;\r",
							"    pm.expect(messageReceived).to.equal(messageExpected);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{teacher_1_password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{teacher_1_id}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Let's look at birds!\",\r\n    \"description_image\": {\r\n        \"title\": \"Seagulls\",\r\n        \"url\": \"https://pixabay.com/images/id-4026280/\",\r\n        \"alt_text\": \"5 seagulls flying over water\"\r\n    }\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/projects/{{nonexistent_entity_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"projects",
						"{{nonexistent_entity_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "update project with bad format id",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "017c16d4-e586-4191-b2a9-e73c6c5b2965",
						"exec": [
							"pm.test('400 status code', () => {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test('correct error message', () => {\r",
							"    const messageExpected = \"All IDs must be positive integers.\";\r",
							"    const messageReceived = pm.response.json().error;\r",
							"    pm.expect(messageReceived).to.equal(messageExpected);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{teacher_1_password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{teacher_1_id}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Let's look at birds!\",\r\n    \"description_image\": {\r\n        \"title\": \"Seagulls\",\r\n        \"url\": \"https://pixabay.com/images/id-4026280/\",\r\n        \"alt_text\": \"5 seagulls flying over water\"\r\n    }\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/projects/{{bad_format_entity_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"projects",
						"{{bad_format_entity_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "update observation_1_1 same image URL",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "f636b985-b380-4ea7-9298-a51557940b05",
						"exec": [
							"const observation_1_1_image_url = pm.environment.get('observation_1_1_image_url');\r",
							"const observation_1_1_patches = JSON.stringify({\r",
							"    \"date\": \"2020-12-05T20:12:05.5Z\",\r",
							"    \"data_image\": {\r",
							"        \"title\": \"American Goldfinch\",\r",
							"        \"url\": observation_1_1_image_url,\r",
							"        \"alt_text\": \"A brightly-colored Americn Goldfinch\"\r",
							"    }\r",
							"});\r",
							"pm.environment.set('observation_1_1_patches', observation_1_1_patches);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "a534af34-2087-49e4-bc06-4eb20a0b27d1",
						"exec": [
							"const compareEntities = Function(\r",
							"    'entityReceived',\r",
							"    'entityExpected',\r",
							"    JSON.parse(pm.environment.get('compareEntities'))\r",
							");\r",
							"\r",
							"pm.test(\"200 status code\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"/* Get constants utilized in next couple tests. */\r",
							"const app_url = pm.environment.get('app_url');\r",
							"const project_1_id = pm.environment.get('project_1_id');\r",
							"const selfUrlReceived = pm.response.json().self;\r",
							"\r",
							"pm.test(\"content is valid\", function () {\r",
							"   let id = pm.response.json().id;\r",
							"   pm.expect(id).to.be.a('string');\r",
							"\r",
							"   /* Verify that the 'self' url matches what is expected based on the id. */\r",
							"   let selfUrlExpected = `${app_url}/projects/${project_1_id}/observations/${id}`;\r",
							"   pm.expect(selfUrlReceived).to.equal(selfUrlExpected);\r",
							"});\r",
							"\r",
							"/* Issue a GET request to make sure the patches in observation_1_1_patches\r",
							" * have gone through and all other fields remain unchanged. */\r",
							"pm.sendRequest(selfUrlReceived, function(err, res) {\r",
							"    pm.test('GET of observation after PATCH has 200 status code', () => {\r",
							"        pm.expect(res.code).to.equal(200);\r",
							"    });\r",
							"\r",
							"    const observation_1_1_patches = JSON.parse(\r",
							"        pm.environment.get('observation_1_1_patches')\r",
							"    );\r",
							"\r",
							"    /* Retrieve expected attributes of observation_1_1 before update from\r",
							"        * project_1_observations_expected array. */\r",
							"    const project_1_observations_expected = JSON.parse(\r",
							"        pm.environment.get('project_1_observations_expected')\r",
							"    );\r",
							"    const attr_expected = project_1_observations_expected[0];\r",
							"\r",
							"    /* Update attr_expected with all expected patches. */\r",
							"    const patch_keys = Object.keys(observation_1_1_patches);\r",
							"    for (const key of patch_keys) {\r",
							"        attr_expected[key] = observation_1_1_patches[key];\r",
							"    }\r",
							"\r",
							"    /* Save updates to project_1_observations_expected environment variable \r",
							"    * for later reference. */\r",
							"    project_1_observations_expected[0] = attr_expected;\r",
							"    pm.environment.set(\r",
							"        'project_1_observations_expected', \r",
							"        JSON.stringify(project_1_observations_expected)\r",
							"    );\r",
							"\r",
							"    /* Compare attributes received to those expected to ensure they match. */\r",
							"    const attr_received = res.json();\r",
							"    pm.test('entity has expected content after patches are made', () => {\r",
							"        const updated_correctly = compareEntities(attr_received, attr_expected);\r",
							"        pm.expect(updated_correctly).to.be.true;\r",
							"    });\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "username",
							"value": "{{teacher_1_id}}",
							"type": "string"
						},
						{
							"key": "password",
							"value": "{{teacher_1_password}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{{observation_1_1_patches}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/projects/{{project_1_id}}/observations/{{observation_1_1_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"projects",
						"{{project_1_id}}",
						"observations",
						"{{observation_1_1_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "update observation_1_1 no image URL",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "cbef4a23-fadc-4310-adb4-d30e234dca55",
						"exec": [
							"const observation_1_1_image_url = pm.environment.get('observation_1_1_image_url');\r",
							"const observation_1_1_patches = JSON.stringify({\r",
							"    \"data_description\": \"I found this American Goldfinch on a walk with my family! It's my favorite type of bird!\"\r",
							"});\r",
							"pm.environment.set('observation_1_1_patches', observation_1_1_patches);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "bc42fed6-1a72-42fa-89ea-5b832e86c7d2",
						"exec": [
							"const compareEntities = Function(\r",
							"    'entityReceived',\r",
							"    'entityExpected',\r",
							"    JSON.parse(pm.environment.get('compareEntities'))\r",
							");\r",
							"\r",
							"pm.test(\"200 status code\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"/* Get constants utilized in next couple tests. */\r",
							"const app_url = pm.environment.get('app_url');\r",
							"const project_1_id = pm.environment.get('project_1_id');\r",
							"const selfUrlReceived = pm.response.json().self;\r",
							"\r",
							"pm.test(\"content is valid\", function () {\r",
							"   let id = pm.response.json().id;\r",
							"   pm.expect(id).to.be.a('string');\r",
							"\r",
							"   /* Verify that the 'self' url matches what is expected based on the id. */\r",
							"   let selfUrlExpected = `${app_url}/projects/${project_1_id}/observations/${id}`;\r",
							"   pm.expect(selfUrlReceived).to.equal(selfUrlExpected);\r",
							"});\r",
							"\r",
							"/* Issue a GET request to make sure the patches in observation_1_1_patches\r",
							" * have gone through and all other fields remain unchanged. */\r",
							"pm.sendRequest(selfUrlReceived, function(err, res) {\r",
							"    pm.test('GET of observation after PATCH has 200 status code', () => {\r",
							"        pm.expect(res.code).to.equal(200);\r",
							"    });\r",
							"\r",
							"    const observation_1_1_patches = JSON.parse(\r",
							"        pm.environment.get('observation_1_1_patches')\r",
							"    );\r",
							"\r",
							"    /* Retrieve expected attributes of observation_1_1 before update from\r",
							"        * project_1_observations_expected array. */\r",
							"    const project_1_observations_expected = JSON.parse(\r",
							"        pm.environment.get('project_1_observations_expected')\r",
							"    );\r",
							"    const attr_expected = project_1_observations_expected[0];\r",
							"\r",
							"    /* Update attr_expected with all expected patches. */\r",
							"    const patch_keys = Object.keys(observation_1_1_patches);\r",
							"    for (const key of patch_keys) {\r",
							"        attr_expected[key] = observation_1_1_patches[key];\r",
							"    }\r",
							"\r",
							"    /* Save updates to project_1_observations_expected environment variable \r",
							"    * for later reference. */\r",
							"    project_1_observations_expected[0] = attr_expected;\r",
							"    pm.environment.set(\r",
							"        'project_1_observations_expected', \r",
							"        JSON.stringify(project_1_observations_expected)\r",
							"    );\r",
							"\r",
							"    /* Compare attributes received to those expected to ensure they match. */\r",
							"    const attr_received = res.json();\r",
							"    pm.test('entity has expected content after patches are made', () => {\r",
							"        const updated_correctly = compareEntities(attr_received, attr_expected);\r",
							"        pm.expect(updated_correctly).to.be.true;\r",
							"    });\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{teacher_1_password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{teacher_1_id}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{{observation_1_1_patches}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/projects/{{project_1_id}}/observations/{{observation_1_1_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"projects",
						"{{project_1_id}}",
						"observations",
						"{{observation_1_1_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "upload new image for observation 1_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "b616e843-87ff-4fb3-be9c-a02cbe31f600",
						"exec": [
							"pm.test('201 status code', () => {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test('content is valid', () => {\r",
							"    const observation_1_2_updated_image_url = pm.response.json().publicUrl;\r",
							"    pm.environment.set('observation_1_2_updated_image_url', observation_1_2_updated_image_url);\r",
							"    const storage_bucket_url = pm.environment.get('storage_bucket_url');\r",
							"    pm.expect(observation_1_2_updated_image_url).to.contain(storage_bucket_url);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{teacher_1_password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{teacher_1_id}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "image",
							"type": "file",
							"src": "obs_1_2-update-sparrows-2.jpg"
						}
					],
					"options": {
						"formdata": {}
					}
				},
				"url": {
					"raw": "{{app_url}}/images",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"images"
					]
				}
			},
			"response": []
		},
		{
			"name": "update observation_1_2 unique bird type replaces other unique bird type",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "44e10100-ac70-4710-881c-7a806ceba4bf",
						"exec": [
							"const observation_1_2_updated_image_url = pm.environment.get('observation_1_2_updated_image_url');\r",
							"const observation_1_2_patches = JSON.stringify({\r",
							"    \"data_image\": {\r",
							"        \"title\": \"Sparrows\",\r",
							"        \"url\": observation_1_2_updated_image_url,\r",
							"        \"alt_text\": \"2 Sparrows standing in shallow water.\"\r",
							"    },\r",
							"    \"data_number\":{\r",
							"        \"description\": \"Sparrow\",\r",
							"        \"quantity\": 2\r",
							"    },\r",
							"    \"data_description\": \"I got this really cool picture of these 2 aparrows!\"\r",
							"});\r",
							"pm.environment.set('observation_1_2_patches', observation_1_2_patches);\r",
							"\r",
							"/* Get project_1 data before POST. */\r",
							"const app_url = pm.environment.get('app_url');\r",
							"const project_1_id = pm.environment.get('project_1_id');\r",
							"pm.sendRequest(`${app_url}/projects/${project_1_id}`, function(err, res) {\r",
							"    pm.environment.set('preRequestCode', res.code);\r",
							"    pm.environment.set('preRequestDataNumber', res.json().data_number.number);\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "834698ac-c00e-4c55-8646-ea06a4503764",
						"exec": [
							"const compareEntities = Function(\r",
							"    'entityReceived',\r",
							"    'entityExpected',\r",
							"    JSON.parse(pm.environment.get('compareEntities'))\r",
							");\r",
							"\r",
							"pm.test(\"200 status code\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"/* Get constants utilized in next couple tests. */\r",
							"const app_url = pm.environment.get('app_url');\r",
							"const project_1_id = pm.environment.get('project_1_id');\r",
							"const selfUrlReceived = pm.response.json().self;\r",
							"\r",
							"pm.test(\"content is valid\", function () {\r",
							"   let id = pm.response.json().id;\r",
							"   pm.expect(id).to.be.a('string');\r",
							"\r",
							"   /* Verify that the 'self' url matches what is expected based on the id. */\r",
							"   let selfUrlExpected = `${app_url}/projects/${project_1_id}/observations/${id}`;\r",
							"   pm.expect(selfUrlReceived).to.equal(selfUrlExpected);\r",
							"});\r",
							"\r",
							"/* Ensure that project_1's data_number.number value has remained the same. */\r",
							"pm.sendRequest(`${app_url}/projects/${project_1_id}`, function(err, res) {\r",
							"    pm.test('GET project before PATCH 200 status code', () => {\r",
							"        const preRequestCode = pm.environment.get('preRequestCode');\r",
							"        pm.environment.unset('preRequestCode');\r",
							"        pm.expect(preRequestCode).to.equal(200);\r",
							"    });\r",
							"    \r",
							"    pm.test('GET project after PATCH 200 status code', () => {\r",
							"        pm.expect(res.code).to.equal(200);\r",
							"    });\r",
							"    \r",
							"    pm.test(\r",
							"        'project_1 data_number.number value correct after observation posted', \r",
							"    () => {\r",
							"        const preRequestDataNumber = pm.environment.get('preRequestDataNumber');\r",
							"        pm.environment.unset('preRequestDataNumber');\r",
							"\r",
							"        const numberExpected = preRequestDataNumber;\r",
							"        const numberReceived = res.json().data_number.number;\r",
							"        pm.expect(numberReceived).to.equal(numberExpected);\r",
							"    });\r",
							"\r",
							"    /* Issue a GET request to make sure the patches in observation_1_2_patches\r",
							"    * have gone through and all other fields remain unchanged. */\r",
							"    pm.sendRequest(selfUrlReceived, function(err, res) {\r",
							"        pm.test('GET of observation after PATCH has 200 status code', () => {\r",
							"            pm.expect(res.code).to.equal(200);\r",
							"        });\r",
							"\r",
							"        const observation_1_2_patches = JSON.parse(\r",
							"            pm.environment.get('observation_1_2_patches')\r",
							"        );\r",
							"\r",
							"        /* Retrieve expected attributes of observation_1_2 before update from\r",
							"            * project_1_observations_expected array. */\r",
							"        const project_1_observations_expected = JSON.parse(\r",
							"            pm.environment.get('project_1_observations_expected')\r",
							"        );\r",
							"        const attr_expected = project_1_observations_expected[1];\r",
							"\r",
							"        /* Update attr_expected with all expected patches. */\r",
							"        const patch_keys = Object.keys(observation_1_2_patches);\r",
							"        for (const key of patch_keys) {\r",
							"            attr_expected[key] = observation_1_2_patches[key];\r",
							"        }\r",
							"\r",
							"        /* Save updates to project_1_observations_expected environment variable \r",
							"        * for later reference. */\r",
							"        project_1_observations_expected[1] = attr_expected;\r",
							"        pm.environment.set(\r",
							"            'project_1_observations_expected', \r",
							"            JSON.stringify(project_1_observations_expected)\r",
							"        );\r",
							"\r",
							"        /* Compare attributes received to those expected to ensure they match. */\r",
							"        const attr_received = res.json();\r",
							"        pm.test('entity has expected content after patches are made', () => {\r",
							"            const updated_correctly = compareEntities(attr_received, attr_expected);\r",
							"            pm.expect(updated_correctly).to.be.true;\r",
							"        });\r",
							"    });\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{teacher_1_password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{teacher_1_id}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{{observation_1_2_patches}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/projects/{{project_1_id}}/observations/{{observation_1_2_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"projects",
						"{{project_1_id}}",
						"observations",
						"{{observation_1_2_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "upload new image for observation 1_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "17691cf4-41dc-437f-bfb9-e27142a45d94",
						"exec": [
							"pm.test('201 status code', () => {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test('content is valid', () => {\r",
							"    const observation_1_3_updated_image_url = pm.response.json().publicUrl;\r",
							"    pm.environment.set('observation_1_3_updated_image_url', observation_1_3_updated_image_url);\r",
							"    const storage_bucket_url = pm.environment.get('storage_bucket_url');\r",
							"    pm.expect(observation_1_3_updated_image_url).to.contain(storage_bucket_url);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{teacher_1_password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{teacher_1_id}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "image",
							"type": "file",
							"src": "obs_1_3_update-starling.jpg"
						}
					],
					"options": {
						"formdata": {}
					}
				},
				"url": {
					"raw": "{{app_url}}/images",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"images"
					]
				}
			},
			"response": []
		},
		{
			"name": "update observation_1_3 unique bird type replaces repeated bird type",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "437eb528-0487-469d-90b1-0bd0ec1eca96",
						"exec": [
							"const observation_1_3_updated_image_url = pm.environment.get('observation_1_3_updated_image_url');\r",
							"const observation_1_3_patches = JSON.stringify({\r",
							"    \"data_image\": {\r",
							"        \"title\": \"Starling\",\r",
							"        \"url\": observation_1_3_updated_image_url,\r",
							"        \"alt_text\": \"A European Starling in a field.\"\r",
							"    },\r",
							"    \"data_number\":{\r",
							"        \"description\": \"European Starling\",\r",
							"        \"quantity\": 1\r",
							"    },\r",
							"    \"data_description\": \"I saw this European Starling behind our school. I meant to record this instead of the American Goldfinch I submitted earlier because someone else had already seen an American Goldfinch!\"\r",
							"});\r",
							"pm.environment.set('observation_1_3_patches', observation_1_3_patches);\r",
							"\r",
							"/* Get project_1 data before POST. */\r",
							"const app_url = pm.environment.get('app_url');\r",
							"const project_1_id = pm.environment.get('project_1_id');\r",
							"pm.sendRequest(`${app_url}/projects/${project_1_id}`, function(err, res) {\r",
							"    pm.environment.set('preRequestCode', res.code);\r",
							"    pm.environment.set('preRequestDataNumber', res.json().data_number.number);\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "aa5717d6-83e5-4c21-9bd9-5a25958b51fe",
						"exec": [
							"const compareEntities = Function(\r",
							"    'entityReceived',\r",
							"    'entityExpected',\r",
							"    JSON.parse(pm.environment.get('compareEntities'))\r",
							");\r",
							"\r",
							"pm.test(\"200 status code\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"/* Get constants utilized in next couple tests. */\r",
							"const app_url = pm.environment.get('app_url');\r",
							"const project_1_id = pm.environment.get('project_1_id');\r",
							"const selfUrlReceived = pm.response.json().self;\r",
							"\r",
							"pm.test(\"content is valid\", function () {\r",
							"   let id = pm.response.json().id;\r",
							"   pm.expect(id).to.be.a('string');\r",
							"\r",
							"   /* Verify that the 'self' url matches what is expected based on the id. */\r",
							"   let selfUrlExpected = `${app_url}/projects/${project_1_id}/observations/${id}`;\r",
							"   pm.expect(selfUrlReceived).to.equal(selfUrlExpected);\r",
							"});\r",
							"\r",
							"/* Ensure that project_1's data_number.number value has increased by 1. */\r",
							"pm.sendRequest(`${app_url}/projects/${project_1_id}`, function(err, res) {\r",
							"    pm.test('GET project before PATCH 200 status code', () => {\r",
							"        const preRequestCode = pm.environment.get('preRequestCode');\r",
							"        pm.environment.unset('preRequestCode');\r",
							"        pm.expect(preRequestCode).to.equal(200);\r",
							"    });\r",
							"    \r",
							"    pm.test('GET project after PATCH 200 status code', () => {\r",
							"        pm.expect(res.code).to.equal(200);\r",
							"    });\r",
							"    \r",
							"    pm.test(\r",
							"        'project_1 data_number.number value correct after observation posted', \r",
							"    () => {\r",
							"        const preRequestDataNumber = pm.environment.get('preRequestDataNumber');\r",
							"        pm.environment.unset('preRequestDataNumber');\r",
							"\r",
							"        const numberExpected = preRequestDataNumber + 1;\r",
							"        const numberReceived = res.json().data_number.number;\r",
							"        pm.expect(numberReceived).to.equal(numberExpected);\r",
							"    });\r",
							"\r",
							"    /* Issue a GET request to make sure the patches in observation_1_3_patches\r",
							"    * have gone through and all other fields remain unchanged. */\r",
							"    pm.sendRequest(selfUrlReceived, function(err, res) {\r",
							"        pm.test('GET of observation after PATCH has 200 status code', () => {\r",
							"            pm.expect(res.code).to.equal(200);\r",
							"        });\r",
							"\r",
							"        const observation_1_3_patches = JSON.parse(\r",
							"            pm.environment.get('observation_1_3_patches')\r",
							"        );\r",
							"\r",
							"        /* Retrieve expected attributes of observation_1_3 before update from\r",
							"            * project_1_observations_expected array. */\r",
							"        const project_1_observations_expected = JSON.parse(\r",
							"            pm.environment.get('project_1_observations_expected')\r",
							"        );\r",
							"        const attr_expected = project_1_observations_expected[2];\r",
							"\r",
							"        /* Update attr_expected with all expected patches. */\r",
							"        const patch_keys = Object.keys(observation_1_3_patches);\r",
							"        for (const key of patch_keys) {\r",
							"            attr_expected[key] = observation_1_3_patches[key];\r",
							"        }\r",
							"\r",
							"        /* Save updates to project_1_observations_expected environment variable \r",
							"        * for later reference. */\r",
							"        project_1_observations_expected[2] = attr_expected;\r",
							"        pm.environment.set(\r",
							"            'project_1_observations_expected', \r",
							"            JSON.stringify(project_1_observations_expected)\r",
							"        );\r",
							"\r",
							"        /* Compare attributes received to those expected to ensure they match. */\r",
							"        const attr_received = res.json();\r",
							"        pm.test('entity has expected content after patches are made', () => {\r",
							"            const updated_correctly = compareEntities(attr_received, attr_expected);\r",
							"            pm.expect(updated_correctly).to.be.true;\r",
							"        });\r",
							"    });\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{teacher_1_password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{teacher_1_id}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{{observation_1_3_patches}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/projects/{{project_1_id}}/observations/{{observation_1_3_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"projects",
						"{{project_1_id}}",
						"observations",
						"{{observation_1_3_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "upload new image for observation 1_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "974eb611-6c34-4002-82d8-4b3322615d48",
						"exec": [
							"pm.test('201 status code', () => {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test('content is valid', () => {\r",
							"    const observation_1_4_updated_image_url = pm.response.json().publicUrl;\r",
							"    pm.environment.set('observation_1_4_updated_image_url', observation_1_4_updated_image_url);\r",
							"    const storage_bucket_url = pm.environment.get('storage_bucket_url');\r",
							"    pm.expect(observation_1_4_updated_image_url).to.contain(storage_bucket_url);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{teacher_1_password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{teacher_1_id}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "image",
							"type": "file",
							"src": "obs_1_4-update-gulls_2.jpg"
						}
					],
					"options": {
						"formdata": {}
					}
				},
				"url": {
					"raw": "{{app_url}}/images",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"images"
					]
				}
			},
			"response": []
		},
		{
			"name": "update observation_1_4 different quantity of same bird type",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "ad7a5185-a3f5-4e43-ab73-74b80bba6b31",
						"exec": [
							"const observation_1_4_updated_image_url = pm.environment.get('observation_1_4_updated_image_url');\r",
							"const observation_1_4_patches = JSON.stringify({\r",
							"    \"data_image\": {\r",
							"        \"title\": \"Gulls\",\r",
							"        \"url\": observation_1_4_updated_image_url,\r",
							"        \"alt_text\": \"2 Seagulls flying\"\r",
							"    },\r",
							"    \"data_number\":{\r",
							"        \"description\": \"Gull\",\r",
							"        \"quantity\": 2\r",
							"    },\r",
							"    \"data_description\": \"2 Gulls are better than 1!\"\r",
							"});\r",
							"pm.environment.set('observation_1_4_patches', observation_1_4_patches);\r",
							"\r",
							"/* Get project_1 data before POST. */\r",
							"const app_url = pm.environment.get('app_url');\r",
							"const project_1_id = pm.environment.get('project_1_id');\r",
							"pm.sendRequest(`${app_url}/projects/${project_1_id}`, function(err, res) {\r",
							"    pm.environment.set('preRequestCode', res.code);\r",
							"    pm.environment.set('preRequestDataNumber', res.json().data_number.number);\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "e210a5b6-48e1-486e-b536-2e6d1eadf5ec",
						"exec": [
							"const compareEntities = Function(\r",
							"    'entityReceived',\r",
							"    'entityExpected',\r",
							"    JSON.parse(pm.environment.get('compareEntities'))\r",
							");\r",
							"\r",
							"pm.test(\"200 status code\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"/* Get constants utilized in next couple tests. */\r",
							"const app_url = pm.environment.get('app_url');\r",
							"const project_1_id = pm.environment.get('project_1_id');\r",
							"const selfUrlReceived = pm.response.json().self;\r",
							"\r",
							"pm.test(\"content is valid\", function () {\r",
							"   let id = pm.response.json().id;\r",
							"   pm.expect(id).to.be.a('string');\r",
							"\r",
							"   /* Verify that the 'self' url matches what is expected based on the id. */\r",
							"   let selfUrlExpected = `${app_url}/projects/${project_1_id}/observations/${id}`;\r",
							"   pm.expect(selfUrlReceived).to.equal(selfUrlExpected);\r",
							"});\r",
							"\r",
							"/* Ensure that project_1's data_number.number value has remained the same. */\r",
							"pm.sendRequest(`${app_url}/projects/${project_1_id}`, function(err, res) {\r",
							"    pm.test('GET project before PATCH 200 status code', () => {\r",
							"        const preRequestCode = pm.environment.get('preRequestCode');\r",
							"        pm.environment.unset('preRequestCode');\r",
							"        pm.expect(preRequestCode).to.equal(200);\r",
							"    });\r",
							"    \r",
							"    pm.test('GET project after PATCH 200 status code', () => {\r",
							"        pm.expect(res.code).to.equal(200);\r",
							"    });\r",
							"    \r",
							"    pm.test(\r",
							"        'project_1 data_number.number value correct after observation posted', \r",
							"    () => {\r",
							"        const preRequestDataNumber = pm.environment.get('preRequestDataNumber');\r",
							"        pm.environment.unset('preRequestDataNumber');\r",
							"\r",
							"        const numberExpected = preRequestDataNumber;\r",
							"        const numberReceived = res.json().data_number.number;\r",
							"        pm.expect(numberReceived).to.equal(numberExpected);\r",
							"    });\r",
							"\r",
							"    /* Issue a GET request to make sure the patches in observation_1_4_patches\r",
							"    * have gone through and all other fields remain unchanged. */\r",
							"    pm.sendRequest(selfUrlReceived, function(err, res) {\r",
							"        pm.test('GET of observation after PATCH has 200 status code', () => {\r",
							"            pm.expect(res.code).to.equal(200);\r",
							"        });\r",
							"\r",
							"        const observation_1_4_patches = JSON.parse(\r",
							"            pm.environment.get('observation_1_4_patches')\r",
							"        );\r",
							"\r",
							"        /* Retrieve expected attributes of observation_1_4 before update from\r",
							"            * project_1_observations_expected array. */\r",
							"        const project_1_observations_expected = JSON.parse(\r",
							"            pm.environment.get('project_1_observations_expected')\r",
							"        );\r",
							"        const attr_expected = project_1_observations_expected[3];\r",
							"\r",
							"        /* Update attr_expected with all expected patches. */\r",
							"        const patch_keys = Object.keys(observation_1_4_patches);\r",
							"        for (const key of patch_keys) {\r",
							"            attr_expected[key] = observation_1_4_patches[key];\r",
							"        }\r",
							"\r",
							"        /* Save updates to project_1_observations_expected environment variable \r",
							"        * for later reference. */\r",
							"        project_1_observations_expected[3] = attr_expected;\r",
							"        pm.environment.set(\r",
							"            'project_1_observations_expected', \r",
							"            JSON.stringify(project_1_observations_expected)\r",
							"        );\r",
							"\r",
							"        /* Compare attributes received to those expected to ensure they match. */\r",
							"        const attr_received = res.json();\r",
							"        pm.test('entity has expected content after patches are made', () => {\r",
							"            const updated_correctly = compareEntities(attr_received, attr_expected);\r",
							"            pm.expect(updated_correctly).to.be.true;\r",
							"        });\r",
							"    });\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{teacher_1_password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{teacher_1_id}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{{observation_1_4_patches}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/projects/{{project_1_id}}/observations/{{observation_1_4_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"projects",
						"{{project_1_id}}",
						"observations",
						"{{observation_1_4_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "upload new image for observation 1_5",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "d507387d-5906-4497-a709-335af30681d3",
						"exec": [
							"pm.test('201 status code', () => {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test('content is valid', () => {\r",
							"    const observation_1_5_updated_image_url = pm.response.json().publicUrl;\r",
							"    pm.environment.set('observation_1_5_updated_image_url', observation_1_5_updated_image_url);\r",
							"    const storage_bucket_url = pm.environment.get('storage_bucket_url');\r",
							"    pm.expect(observation_1_5_updated_image_url).to.contain(storage_bucket_url);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{teacher_1_password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{teacher_1_id}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "image",
							"type": "file",
							"src": "obs_1_5-update-gull.jpg"
						}
					],
					"options": {
						"formdata": {}
					}
				},
				"url": {
					"raw": "{{app_url}}/images",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"images"
					]
				}
			},
			"response": []
		},
		{
			"name": "update observation_1_5 repeated bird type replaces unique type",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "b155a9da-6fb6-4e19-a3e5-5805df08b579",
						"exec": [
							"const observation_1_5_updated_image_url = pm.environment.get('observation_1_5_updated_image_url');\r",
							"const observation_1_5_patches = JSON.stringify({\r",
							"    \"data_image\": {\r",
							"        \"title\": \"Gull\",\r",
							"        \"url\": observation_1_5_updated_image_url,\r",
							"        \"alt_text\": \"An up-close, profile shot of a Seagull\"\r",
							"    },\r",
							"    \"data_number\":{\r",
							"        \"description\": \"Gull\",\r",
							"        \"quantity\": 1\r",
							"    },\r",
							"    \"data_description\": \"I got this really cool picture of this Seagull up close. Isn't it cute?\"\r",
							"});\r",
							"pm.environment.set('observation_1_5_patches', observation_1_5_patches);\r",
							"\r",
							"/* Get project_1 data before POST. */\r",
							"const app_url = pm.environment.get('app_url');\r",
							"const project_1_id = pm.environment.get('project_1_id');\r",
							"pm.sendRequest(`${app_url}/projects/${project_1_id}`, function(err, res) {\r",
							"    pm.environment.set('preRequestCode', res.code);\r",
							"    pm.environment.set('preRequestDataNumber', res.json().data_number.number);\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "9c433adc-4d8d-460c-91d5-101e2b8a1414",
						"exec": [
							"const compareEntities = Function(\r",
							"    'entityReceived',\r",
							"    'entityExpected',\r",
							"    JSON.parse(pm.environment.get('compareEntities'))\r",
							");\r",
							"\r",
							"pm.test(\"200 status code\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"/* Get constants utilized in next couple tests. */\r",
							"const app_url = pm.environment.get('app_url');\r",
							"const project_1_id = pm.environment.get('project_1_id');\r",
							"const selfUrlReceived = pm.response.json().self;\r",
							"\r",
							"pm.test(\"content is valid\", function () {\r",
							"   let id = pm.response.json().id;\r",
							"   pm.expect(id).to.be.a('string');\r",
							"\r",
							"   /* Verify that the 'self' url matches what is expected based on the id. */\r",
							"   let selfUrlExpected = `${app_url}/projects/${project_1_id}/observations/${id}`;\r",
							"   pm.expect(selfUrlReceived).to.equal(selfUrlExpected);\r",
							"});\r",
							"\r",
							"/* Ensure that project_1's data_number.number value has decreased by 1. */\r",
							"pm.sendRequest(`${app_url}/projects/${project_1_id}`, function(err, res) {\r",
							"    pm.test('GET project before PATCH 200 status code', () => {\r",
							"        const preRequestCode = pm.environment.get('preRequestCode');\r",
							"        pm.environment.unset('preRequestCode');\r",
							"        pm.expect(preRequestCode).to.equal(200);\r",
							"    });\r",
							"    \r",
							"    pm.test('GET project after PATCH 200 status code', () => {\r",
							"        pm.expect(res.code).to.equal(200);\r",
							"    });\r",
							"    \r",
							"    pm.test(\r",
							"        'project_1 data_number.number value correct after observation posted', \r",
							"    () => {\r",
							"        const preRequestDataNumber = pm.environment.get('preRequestDataNumber');\r",
							"        pm.environment.unset('preRequestDataNumber');\r",
							"\r",
							"        const numberExpected = preRequestDataNumber - 1;\r",
							"        const numberReceived = res.json().data_number.number;\r",
							"        pm.expect(numberReceived).to.equal(numberExpected);\r",
							"    });\r",
							"\r",
							"    /* Issue a GET request to make sure the patches in observation_1_5_patches\r",
							"    * have gone through and all other fields remain unchanged. */\r",
							"    pm.sendRequest(selfUrlReceived, function(err, res) {\r",
							"        pm.test('GET of observation after PATCH has 200 status code', () => {\r",
							"            pm.expect(res.code).to.equal(200);\r",
							"        });\r",
							"\r",
							"        const observation_1_5_patches = JSON.parse(\r",
							"            pm.environment.get('observation_1_5_patches')\r",
							"        );\r",
							"\r",
							"        /* Retrieve expected attributes of observation_1_5 before update from\r",
							"            * project_1_observations_expected array. */\r",
							"        const project_1_observations_expected = JSON.parse(\r",
							"            pm.environment.get('project_1_observations_expected')\r",
							"        );\r",
							"        const attr_expected = project_1_observations_expected[4];\r",
							"\r",
							"        /* Update attr_expected with all expected patches. */\r",
							"        const patch_keys = Object.keys(observation_1_5_patches);\r",
							"        for (const key of patch_keys) {\r",
							"            attr_expected[key] = observation_1_5_patches[key];\r",
							"        }\r",
							"\r",
							"        /* Save updates to project_1_observations_expected environment variable \r",
							"        * for later reference. */\r",
							"        project_1_observations_expected[4] = attr_expected;\r",
							"        pm.environment.set(\r",
							"            'project_1_observations_expected', \r",
							"            JSON.stringify(project_1_observations_expected)\r",
							"        );\r",
							"\r",
							"        /* Compare attributes received to those expected to ensure they match. */\r",
							"        const attr_received = res.json();\r",
							"        pm.test('entity has expected content after patches are made', () => {\r",
							"            const updated_correctly = compareEntities(attr_received, attr_expected);\r",
							"            pm.expect(updated_correctly).to.be.true;\r",
							"        });\r",
							"    });\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{teacher_1_password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{teacher_1_id}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{{observation_1_5_patches}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/projects/{{project_1_id}}/observations/{{observation_1_5_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"projects",
						"{{project_1_id}}",
						"observations",
						"{{observation_1_5_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete observation 1_1",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "49d0b2e7-c9a6-4ee1-80df-118523c21246",
						"exec": [
							"pm.test(\"204 no content\", function () {\r",
							"    pm.response.to.have.status(204);\r",
							"});\r",
							"\r",
							"const app_url = pm.environment.get('app_url');\r",
							"const project_id = pm.environment.get('project_1_id');\r",
							"const observation_id = pm.environment.get('observation_1_1_id');\r",
							"const getUrl = `${app_url}/projects/${project_id}/observations/${observation_id}`;\r",
							"\r",
							"pm.sendRequest(getUrl, function(err, res) {\r",
							"    pm.test(\"project no longer exists\", function() {\r",
							"        pm.expect(res.code).to.equal(404);\r",
							"        const errorReceived = res.json().error;\r",
							"        const errorExpected = \"The item you requested could not be found.\";\r",
							"        pm.expect(errorReceived).to.equal(errorExpected);\r",
							"    });\r",
							"\r",
							"    /* Ensure that project_1's data_number.number value has decreased by 1 after update. */\r",
							"    pm.sendRequest(`${app_url}/projects/${project_id}`, function(err, res) {\r",
							"        pm.test('GET project before DELETE 200 status code', () => {\r",
							"            const preRequestCode = pm.environment.get('preRequestCode');\r",
							"            pm.environment.unset('preRequestCode');\r",
							"            pm.expect(preRequestCode).to.equal(200);\r",
							"        });\r",
							"        \r",
							"        pm.test('GET project after DELETE 200 status code', () => {\r",
							"            pm.expect(res.code).to.equal(200);\r",
							"        });\r",
							"        \r",
							"        pm.test(\r",
							"            'project_1 data_number.number value correct after observation deleted', \r",
							"        () => {\r",
							"            const preRequestDataNumber = pm.environment.get('preRequestDataNumber');\r",
							"            pm.environment.unset('preRequestDataNumber');\r",
							"\r",
							"            const numberExpected = preRequestDataNumber - 1;\r",
							"            const numberReceived = res.json().data_number.number;\r",
							"            pm.expect(numberReceived).to.equal(numberExpected);\r",
							"        });\r",
							"    });\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "31ccb26f-25c0-48fc-b42a-3d634b4f441b",
						"exec": [
							"/* Get project_1 data before POST. */\r",
							"const app_url = pm.environment.get('app_url');\r",
							"const project_1_id = pm.environment.get('project_1_id');\r",
							"pm.sendRequest(`${app_url}/projects/${project_1_id}`, function(err, res) {\r",
							"    pm.environment.set('preRequestCode', res.code);\r",
							"    pm.environment.set('preRequestDataNumber', res.json().data_number.number);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{teacher_1_password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{teacher_1_id}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/projects/{{project_1_id}}/observations/{{observation_1_1_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"projects",
						"{{project_1_id}}",
						"observations",
						"{{observation_1_1_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete observation 1_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "c020eeac-8c6c-4bb5-8daf-905256deef08",
						"exec": [
							"pm.test(\"204 no content\", function () {\r",
							"    pm.response.to.have.status(204);\r",
							"});\r",
							"\r",
							"const app_url = pm.environment.get('app_url');\r",
							"const project_id = pm.environment.get('project_1_id');\r",
							"const observation_id = pm.environment.get('observation_1_2_id');\r",
							"const getUrl = `${app_url}/projects/${project_id}/observations/${observation_id}`;\r",
							"\r",
							"pm.sendRequest(getUrl, function(err, res) {\r",
							"    pm.test(\"project no longer exists\", function() {\r",
							"        pm.expect(res.code).to.equal(404);\r",
							"        const errorReceived = res.json().error;\r",
							"        const errorExpected = \"The item you requested could not be found.\";\r",
							"        pm.expect(errorReceived).to.equal(errorExpected);\r",
							"    });\r",
							"\r",
							"    /* Ensure that project_1's data_number.number value has decreased by 1 after update. */\r",
							"    pm.sendRequest(`${app_url}/projects/${project_id}`, function(err, res) {\r",
							"        pm.test('GET project before DELETE 200 status code', () => {\r",
							"            const preRequestCode = pm.environment.get('preRequestCode');\r",
							"            pm.environment.unset('preRequestCode');\r",
							"            pm.expect(preRequestCode).to.equal(200);\r",
							"        });\r",
							"        \r",
							"        pm.test('GET project after DELETE 200 status code', () => {\r",
							"            pm.expect(res.code).to.equal(200);\r",
							"        });\r",
							"        \r",
							"        pm.test(\r",
							"            'project_1 data_number.number value correct after observation deleted', \r",
							"        () => {\r",
							"            const preRequestDataNumber = pm.environment.get('preRequestDataNumber');\r",
							"            pm.environment.unset('preRequestDataNumber');\r",
							"\r",
							"            const numberExpected = preRequestDataNumber - 1;\r",
							"            const numberReceived = res.json().data_number.number;\r",
							"            pm.expect(numberReceived).to.equal(numberExpected);\r",
							"        });\r",
							"    });\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "c6256179-96f9-4fb5-8427-8016a0787de5",
						"exec": [
							"/* Get project_1 data before POST. */\r",
							"const app_url = pm.environment.get('app_url');\r",
							"const project_1_id = pm.environment.get('project_1_id');\r",
							"pm.sendRequest(`${app_url}/projects/${project_1_id}`, function(err, res) {\r",
							"    pm.environment.set('preRequestCode', res.code);\r",
							"    pm.environment.set('preRequestDataNumber', res.json().data_number.number);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{teacher_1_password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{teacher_1_id}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/projects/{{project_1_id}}/observations/{{observation_1_2_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"projects",
						"{{project_1_id}}",
						"observations",
						"{{observation_1_2_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete observation 1_5",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "3bb7d256-721a-413d-a1b5-f45b4e8ec9ec",
						"exec": [
							"pm.test(\"204 no content\", function () {\r",
							"    pm.response.to.have.status(204);\r",
							"});\r",
							"\r",
							"const app_url = pm.environment.get('app_url');\r",
							"const project_id = pm.environment.get('project_1_id');\r",
							"const observation_id = pm.environment.get('observation_1_1_id');\r",
							"const getUrl = `${app_url}/projects/${project_id}/observations/${observation_id}`;\r",
							"\r",
							"pm.sendRequest(getUrl, function(err, res) {\r",
							"    pm.test(\"project no longer exists\", function() {\r",
							"        pm.expect(res.code).to.equal(404);\r",
							"        const errorReceived = res.json().error;\r",
							"        const errorExpected = \"The item you requested could not be found.\";\r",
							"        pm.expect(errorReceived).to.equal(errorExpected);\r",
							"    });\r",
							"\r",
							"    /* Ensure that project_1's data_number.number value has stayed the same after delete. */\r",
							"    pm.sendRequest(`${app_url}/projects/${project_id}`, function(err, res) {\r",
							"        pm.test('GET project before DELETE 200 status code', () => {\r",
							"            const preRequestCode = pm.environment.get('preRequestCode');\r",
							"            pm.environment.unset('preRequestCode');\r",
							"            pm.expect(preRequestCode).to.equal(200);\r",
							"        });\r",
							"        \r",
							"        pm.test('GET project after DELETE 200 status code', () => {\r",
							"            pm.expect(res.code).to.equal(200);\r",
							"        });\r",
							"        \r",
							"        pm.test(\r",
							"            'project_1 data_number.number value correct after observation deleted', \r",
							"        () => {\r",
							"            const preRequestDataNumber = pm.environment.get('preRequestDataNumber');\r",
							"            pm.environment.unset('preRequestDataNumber');\r",
							"\r",
							"            const numberExpected = preRequestDataNumber;\r",
							"            const numberReceived = res.json().data_number.number;\r",
							"            pm.expect(numberReceived).to.equal(numberExpected);\r",
							"        });\r",
							"    });\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "9d603bbd-af9b-4400-bb16-bba38ee98ee5",
						"exec": [
							"/* Get project_1 data before DELETE. */\r",
							"const app_url = pm.environment.get('app_url');\r",
							"const project_1_id = pm.environment.get('project_1_id');\r",
							"pm.sendRequest(`${app_url}/projects/${project_1_id}`, function(err, res) {\r",
							"    pm.environment.set('preRequestCode', res.code);\r",
							"    pm.environment.set('preRequestDataNumber', res.json().data_number.number);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{teacher_1_password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{teacher_1_id}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/projects/{{project_1_id}}/observations/{{observation_1_5_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"projects",
						"{{project_1_id}}",
						"observations",
						"{{observation_1_5_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete project_1",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "21dd58b0-16a9-4bd3-8477-a52c4cd07c6e",
						"exec": [
							"pm.test(\"204 no content\", function () {\r",
							"    pm.response.to.have.status(204);\r",
							"});\r",
							"\r",
							"const app_url = pm.environment.get('app_url');\r",
							"const project_id = pm.environment.get('project_1_id');\r",
							"\r",
							"pm.sendRequest(`${app_url}/projects/${project_id}`, function(err, res) {\r",
							"    pm.test(\"project no longer exists\", function() {\r",
							"        pm.expect(res.code).to.equal(404);\r",
							"        const errorReceived = res.json().error;\r",
							"        const errorExpected = \"The item you requested could not be found.\";\r",
							"        pm.expect(errorReceived).to.equal(errorExpected);\r",
							"    });\r",
							"\r",
							"    /* Ensure observations 1_3, 1_4, and 1_6 have been deleted. */\r",
							"    const observation_1_3_id = pm.environment.get('observation_1_3_id');\r",
							"    pm.sendRequest(`${app_url}/projects/${project_id}/observations/${observation_1_3_id}`, function(err, res) {\r",
							"        pm.test(\"observation 1_3 no longer exists\", function() {\r",
							"            pm.expect(res.code).to.equal(404);\r",
							"            const errorReceived = res.json().error;\r",
							"            const errorExpected = \"The item you requested could not be found.\";\r",
							"            pm.expect(errorReceived).to.equal(errorExpected);\r",
							"        });\r",
							"\r",
							"        const observation_1_4_id = pm.environment.get('observation_1_4_id');\r",
							"        pm.sendRequest(`${app_url}/projects/${project_id}/observations/${observation_1_4_id}`, function(err, res) {\r",
							"            pm.test(\"observation 1_4 no longer exists\", function() {\r",
							"                pm.expect(res.code).to.equal(404);\r",
							"                const errorReceived = res.json().error;\r",
							"                const errorExpected = \"The item you requested could not be found.\";\r",
							"                pm.expect(errorReceived).to.equal(errorExpected);\r",
							"            });\r",
							"\r",
							"            const observation_1_6_id = pm.environment.get('observation_1_6_id');\r",
							"            pm.sendRequest(`${app_url}/projects/${project_id}/observations/${observation_1_6_id}`, function(err, res) {\r",
							"                pm.test(\"observation 1_6 no longer exists\", function() {\r",
							"                    pm.expect(res.code).to.equal(404);\r",
							"                    const errorReceived = res.json().error;\r",
							"                    const errorExpected = \"The item you requested could not be found.\";\r",
							"                    pm.expect(errorReceived).to.equal(errorExpected);\r",
							"                });\r",
							"            });\r",
							"        });\r",
							"    });\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "username",
							"value": "{{teacher_1_id}}",
							"type": "string"
						},
						{
							"key": "password",
							"value": "{{teacher_1_password}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/projects/{{project_1_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"projects",
						"{{project_1_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete project that no longer exists",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "97d8572f-8d33-488a-b276-5a3099f74e89",
						"exec": [
							"pm.test('404 status code', () => {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test('correct error message', () => {\r",
							"    const messageExpected = \"The item you requested could not be found.\";\r",
							"    const messageReceived = pm.response.json().error;\r",
							"    pm.expect(messageReceived).to.equal(messageExpected);\r",
							"\r",
							"    /* Delete all environment variables associated with project_1 */\r",
							"    pm.environment.unset('projects_expected');\r",
							"    pm.environment.unset('project_1_id');\r",
							"    pm.environment.unset('project_1_attr');\r",
							"    pm.environment.unset('project_1_patches');\r",
							"    pm.environment.unset('project_1_updated_image_url');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{teacher_1_password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{teacher_1_id}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/projects/{{project_1_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"projects",
						"{{project_1_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete project with nonexistent id",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "d97057d4-3c76-4d78-9241-d0f1d5760f0d",
						"exec": [
							"pm.test('404 status code', () => {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test('correct error message', () => {\r",
							"    const messageExpected = \"The item you requested could not be found.\";\r",
							"    const messageReceived = pm.response.json().error;\r",
							"    pm.expect(messageReceived).to.equal(messageExpected);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{teacher_1_password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{teacher_1_id}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/projects/{{nonexistent_entity_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"projects",
						"{{nonexistent_entity_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete project with bad format id",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "d198c472-ffa5-4034-a96b-dc19e8d3a0b5",
						"exec": [
							"pm.test('400 status code', () => {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test('correct error message', () => {\r",
							"    const messageExpected = \"All IDs must be positive integers.\";\r",
							"    const messageReceived = pm.response.json().error;\r",
							"    pm.expect(messageReceived).to.equal(messageExpected);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{teacher_1_password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{teacher_1_id}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/projects/{{bad_format_entity_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"projects",
						"{{bad_format_entity_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete project_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "482f2c41-c7a2-40b3-b313-0848bbd549e5",
						"exec": [
							"function generateGetUrl() {\r",
							"    const appUrl = pm.environment.get('app_url');\r",
							"    const collectionName = pm.request.url.path[0];\r",
							"    const entityId = pm.request.url.path[1];\r",
							"    return appUrl + \"/\" + collectionName + \"/\" + entityId;\r",
							"}\r",
							"\r",
							"pm.test(\"204 no content\", function () {\r",
							"    pm.response.to.have.status(204);\r",
							"});\r",
							"\r",
							"/* Ensure project and image have been deleted. */\r",
							"const project_2_attr = JSON.parse(pm.environment.get('project_2_attr'));\r",
							"const image_url = project_2_attr.description_image.url;\r",
							"\r",
							"pm.sendRequest(generateGetUrl(), function(err, res) {\r",
							"    pm.test(\"project no longer exists\", function() {\r",
							"        pm.expect(res.code).to.equal(404);\r",
							"        const errorReceived = res.json().error;\r",
							"        const errorExpected = \"The item you requested could not be found.\";\r",
							"        pm.expect(errorReceived).to.equal(errorExpected);\r",
							"    });\r",
							"\r",
							"    /* Delete environment variables associated with project_2. */\r",
							"    pm.environment.unset('project_2_id');\r",
							"    pm.environment.unset('project_2_attr');\r",
							"    pm.environment.unset('project_2_image_url');\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{teacher_1_password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{teacher_1_id}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/projects/{{project_2_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"projects",
						"{{project_2_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete project_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "ad4e4384-3ade-4d11-ba9e-2349361f5311",
						"exec": [
							"function generateGetUrl() {\r",
							"    const appUrl = pm.environment.get('app_url');\r",
							"    const collectionName = pm.request.url.path[0];\r",
							"    const entityId = pm.request.url.path[1];\r",
							"    return appUrl + \"/\" + collectionName + \"/\" + entityId;\r",
							"}\r",
							"\r",
							"pm.test(\"204 no content\", function () {\r",
							"    pm.response.to.have.status(204);\r",
							"});\r",
							"\r",
							"/* Ensure project and image have been deleted. */\r",
							"const project_3_attr = JSON.parse(pm.environment.get('project_3_attr'));\r",
							"const image_url = project_3_attr.description_image.url;\r",
							"\r",
							"pm.sendRequest(generateGetUrl(), function(err, res) {\r",
							"    pm.test(\"project no longer exists\", function() {\r",
							"        pm.expect(res.code).to.equal(404);\r",
							"        const errorReceived = res.json().error;\r",
							"        const errorExpected = \"The item you requested could not be found.\";\r",
							"        pm.expect(errorReceived).to.equal(errorExpected);\r",
							"    });\r",
							"\r",
							"    /* Delete environment variables associated with project_2. */\r",
							"    pm.environment.unset('project_3_id');\r",
							"    pm.environment.unset('project_3_attr');\r",
							"    pm.environment.unset('project_3_image_url');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{teacher_1_password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{teacher_1_id}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/projects/{{project_3_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"projects",
						"{{project_3_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete project_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "f9d444cd-b78d-43e0-af5b-dd765f21af81",
						"exec": [
							"function generateGetUrl() {\r",
							"    const appUrl = pm.environment.get('app_url');\r",
							"    const collectionName = pm.request.url.path[0];\r",
							"    const entityId = pm.request.url.path[1];\r",
							"    return appUrl + \"/\" + collectionName + \"/\" + entityId;\r",
							"}\r",
							"\r",
							"pm.test(\"204 no content\", function () {\r",
							"    pm.response.to.have.status(204);\r",
							"});\r",
							"\r",
							"/* Ensure project and image have been deleted. */\r",
							"const project_4_attr = JSON.parse(pm.environment.get('project_4_attr'));\r",
							"const image_url = project_4_attr.description_image.url;\r",
							"\r",
							"pm.sendRequest(generateGetUrl(), function(err, res) {\r",
							"    pm.test(\"project no longer exists\", function() {\r",
							"        pm.expect(res.code).to.equal(404);\r",
							"        const errorReceived = res.json().error;\r",
							"        const errorExpected = \"The item you requested could not be found.\";\r",
							"        pm.expect(errorReceived).to.equal(errorExpected);\r",
							"    });\r",
							"\r",
							"    /* Delete environment variables associated with project_2. */\r",
							"    pm.environment.unset('project_4_id');\r",
							"    pm.environment.unset('project_4_attr');\r",
							"    pm.environment.unset('project_4_image_url');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{teacher_2_password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{teacher_2_id}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/projects/{{project_4_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"projects",
						"{{project_4_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete project_5",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "34b68a26-1151-4888-acf2-abb3c04ae9f9",
						"exec": [
							"function generateGetUrl() {\r",
							"    const appUrl = pm.environment.get('app_url');\r",
							"    const collectionName = pm.request.url.path[0];\r",
							"    const entityId = pm.request.url.path[1];\r",
							"    return appUrl + \"/\" + collectionName + \"/\" + entityId;\r",
							"}\r",
							"\r",
							"pm.test(\"204 no content\", function () {\r",
							"    pm.response.to.have.status(204);\r",
							"});\r",
							"\r",
							"/* Ensure project and image have been deleted. */\r",
							"const project_5_attr = JSON.parse(pm.environment.get('project_5_attr'));\r",
							"const image_url = project_5_attr.description_image.url;\r",
							"\r",
							"pm.sendRequest(generateGetUrl(), function(err, res) {\r",
							"    pm.test(\"project no longer exists\", function() {\r",
							"        pm.expect(res.code).to.equal(404);\r",
							"        const errorReceived = res.json().error;\r",
							"        const errorExpected = \"The item you requested could not be found.\";\r",
							"        pm.expect(errorReceived).to.equal(errorExpected);\r",
							"    });\r",
							"\r",
							"    /* Delete environment variables associated with project_2. */\r",
							"    pm.environment.unset('project_5_id');\r",
							"    pm.environment.unset('project_5_attr');\r",
							"    pm.environment.unset('project_5_image_url');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{teacher_2_password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{teacher_2_id}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/projects/{{project_5_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"projects",
						"{{project_5_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete project_6",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "02f965b3-8c85-4910-944a-711e498572a5",
						"exec": [
							"function generateGetUrl() {\r",
							"    const appUrl = pm.environment.get('app_url');\r",
							"    const collectionName = pm.request.url.path[0];\r",
							"    const entityId = pm.request.url.path[1];\r",
							"    return appUrl + \"/\" + collectionName + \"/\" + entityId;\r",
							"}\r",
							"\r",
							"pm.test(\"204 no content\", function () {\r",
							"    pm.response.to.have.status(204);\r",
							"});\r",
							"\r",
							"/* Ensure project and image have been deleted. */\r",
							"const project_6_attr = JSON.parse(pm.environment.get('project_6_attr'));\r",
							"const image_url = project_6_attr.description_image.url;\r",
							"\r",
							"pm.sendRequest(generateGetUrl(), function(err, res) {\r",
							"    pm.test(\"project no longer exists\", function() {\r",
							"        pm.expect(res.code).to.equal(404);\r",
							"        const errorReceived = res.json().error;\r",
							"        const errorExpected = \"The item you requested could not be found.\";\r",
							"        pm.expect(errorReceived).to.equal(errorExpected);\r",
							"    });\r",
							"\r",
							"    /* Delete environment variables associated with project_2. */\r",
							"    pm.environment.unset('project_6_id');\r",
							"    pm.environment.unset('project_6_attr');\r",
							"    pm.environment.unset('project_6_image_url');\r",
							"\r",
							"    /* Delete all other environment variables \r",
							"        * dynamically added during testing. */\r",
							"    pm.environment.unset('compareEntities');\r",
							"    pm.environment.unset('compareEntityPages');\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{teacher_2_password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{teacher_2_id}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/projects/{{project_6_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"projects",
						"{{project_6_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete teacher_1",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "fccd276e-9b2f-4707-b59a-8531b9e3460b",
						"exec": [
							"pm.test('204 status code', () => {\r",
							"    pm.response.to.have.status(204);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "username",
							"value": "{{teacher_1_id}}",
							"type": "string"
						},
						{
							"key": "password",
							"value": "{{teacher_1_password}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/teachers/{{teacher_1_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"teachers",
						"{{teacher_1_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete teacher_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "fccd276e-9b2f-4707-b59a-8531b9e3460b",
						"exec": [
							"pm.test('204 status code', () => {\r",
							"    pm.response.to.have.status(204);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{teacher_2_password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{teacher_2_id}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/teachers/{{teacher_2_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"teachers",
						"{{teacher_2_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get all teachers method not allowed",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "9b5a3203-a489-4138-b2ba-0b003f02c1ee",
						"exec": [
							"pm.test('405 status code', () => {\r",
							"    pm.response.to.have.status(405);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/teachers",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"teachers"
					]
				}
			},
			"response": []
		},
		{
			"name": "create teacher credential method not allowed",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "69c0a9a6-aa86-4ea6-adeb-9b28885997cd",
						"exec": [
							"pm.test('405 status code', () => {\r",
							"    pm.response.to.have.status(405);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{app_url}}/teachers/{{teacher_1_id}}/credentials",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"teachers",
						"{{teacher_1_id}}",
						"credentials"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete teacher credential method not allowed",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "69c0a9a6-aa86-4ea6-adeb-9b28885997cd",
						"exec": [
							"pm.test('405 status code', () => {\r",
							"    pm.response.to.have.status(405);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/teachers/{{teacher_1_id}}/credentials",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"teachers",
						"{{teacher_1_id}}",
						"credentials"
					]
				}
			},
			"response": []
		}
	],
	"protocolProfileBehavior": {}
}